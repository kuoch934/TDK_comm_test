
TDK_comm_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b58  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08006d1c  08006d1c  00016d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f98  08006f98  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa0  08006fa0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  20000060  08007008  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018b4  08007008  000218b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149a7  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002af2  00000000  00000000  00034a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  00037568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c02  00000000  00000000  000384b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c7a  00000000  00000000  000390ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129be  00000000  00000000  0005bd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6408  00000000  00000000  0006e6f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000446c  00000000  00000000  00144afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00148f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000060 	.word	0x20000060
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08006d04 	.word	0x08006d04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000064 	.word	0x20000064
 8000200:	08006d04 	.word	0x08006d04

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	0a5a      	lsrs	r2, r3, #9
 8000520:	490f      	ldr	r1, [pc, #60]	; (8000560 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000522:	fba1 1202 	umull	r1, r2, r1, r2
 8000526:	09d2      	lsrs	r2, r2, #7
 8000528:	490e      	ldr	r1, [pc, #56]	; (8000564 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800052a:	fb01 f202 	mul.w	r2, r1, r2
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	0a5b      	lsrs	r3, r3, #9
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800053a:	fba2 2303 	umull	r2, r3, r2, r3
 800053e:	09db      	lsrs	r3, r3, #7
 8000540:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	441a      	add	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	601a      	str	r2, [r3, #0]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	00044b83 	.word	0x00044b83
 8000564:	3b9aca00 	.word	0x3b9aca00

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f002 fd14 	bl	8002f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f812 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f920 	bl	80007b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000578:	f000 f8f6 	bl	8000768 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8ca 	bl	8000714 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000580:	f000 f878 	bl	8000674 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000584:	f001 fba2 	bl	8001ccc <setup>

  HAL_TIM_Base_Start_IT(&htim1);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <main+0x2c>)
 800058a:	f004 fbf5 	bl	8004d78 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 800058e:	f001 fbb3 	bl	8001cf8 <loop>
 8000592:	e7fc      	b.n	800058e <main+0x26>
 8000594:	2000007c 	.word	0x2000007c

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	; 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f006 fa59 	bl	8006a5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <SystemClock_Config+0xd4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a29      	ldr	r2, [pc, #164]	; (800066c <SystemClock_Config+0xd4>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SystemClock_Config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005e4:	4a22      	ldr	r2, [pc, #136]	; (8000670 <SystemClock_Config+0xd8>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b20      	ldr	r3, [pc, #128]	; (8000670 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000614:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000616:	2304      	movs	r3, #4
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f8b8 	bl	800479c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000632:	f000 f941 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2102      	movs	r1, #2
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fd57 	bl	8004108 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000660:	f000 f92a 	bl	80008b8 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000688:	463b      	mov	r3, r7
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_TIM1_Init+0x98>)
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <MX_TIM1_Init+0x9c>)
 8000694:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000696:	4b1d      	ldr	r3, [pc, #116]	; (800070c <MX_TIM1_Init+0x98>)
 8000698:	2253      	movs	r2, #83	; 0x53
 800069a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_TIM1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_TIM1_Init+0x98>)
 80006a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80006a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_TIM1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_TIM1_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_TIM1_Init+0x98>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_TIM1_Init+0x98>)
 80006be:	f004 fb0b 	bl	8004cd8 <HAL_TIM_Base_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006c8:	f000 f8f6 	bl	80008b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4619      	mov	r1, r3
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <MX_TIM1_Init+0x98>)
 80006da:	f004 fcc5 	bl	8005068 <HAL_TIM_ConfigClockSource>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006e4:	f000 f8e8 	bl	80008b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_TIM1_Init+0x98>)
 80006f6:	f004 fee1 	bl	80054bc <HAL_TIMEx_MasterConfigSynchronization>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000700:	f000 f8da 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000007c 	.word	0x2000007c
 8000710:	40010000 	.word	0x40010000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f004 ff46 	bl	80055dc <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f8af 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000c4 	.word	0x200000c4
 8000764:	40004400 	.word	0x40004400

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2010      	movs	r0, #16
 8000790:	f002 fd73 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f002 fd8c 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2011      	movs	r0, #17
 80007a0:	f002 fd6b 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80007a4:	2011      	movs	r0, #17
 80007a6:	f002 fd84 	bl	80032b2 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	613b      	str	r3, [r7, #16]
 80007e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a1e      	ldr	r2, [pc, #120]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_GPIO_Init+0xd4>)
 8000844:	f003 fc46 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800084e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480c      	ldr	r0, [pc, #48]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000860:	f003 f9b0 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000864:	2320      	movs	r3, #32
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0xd4>)
 800087c:	f003 f9a2 	bl	8003bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	40020800 	.word	0x40020800

08000894 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	t++;
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a4:	6013      	str	r3, [r2, #0]
	publish();
 80008a6:	f001 f995 	bl	8001bd4 <publish>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001c8 	.word	0x200001c8

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>

080008c2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <_ZN3ros3MsgC1Ev+0x1c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	08006f68 	.word	0x08006f68

08000904 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
      data()
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ffe8 	bl	80008e4 <_ZN3ros3MsgC1Ev>
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3304      	adds	r3, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ffcf 	bl	80008c2 <_ZN3ros4TimeC1Ev>
    {
    }
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	08006f50 	.word	0x08006f50

08000934 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6859      	ldr	r1, [r3, #4]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4413      	add	r3, r2
 800094c:	b2ca      	uxtb	r2, r1
 800094e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	0a19      	lsrs	r1, r3, #8
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	3301      	adds	r3, #1
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	4413      	add	r3, r2
 800095e:	b2ca      	uxtb	r2, r1
 8000960:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	0c19      	lsrs	r1, r3, #16
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3302      	adds	r3, #2
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	4413      	add	r3, r2
 8000970:	b2ca      	uxtb	r2, r1
 8000972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	0e19      	lsrs	r1, r3, #24
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	3303      	adds	r3, #3
 800097e:	683a      	ldr	r2, [r7, #0]
 8000980:	4413      	add	r3, r2
 8000982:	b2ca      	uxtb	r2, r1
 8000984:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6899      	ldr	r1, [r3, #8]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	683a      	ldr	r2, [r7, #0]
 8000994:	4413      	add	r3, r2
 8000996:	b2ca      	uxtb	r2, r1
 8000998:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	0a19      	lsrs	r1, r3, #8
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	3301      	adds	r3, #1
 80009a4:	683a      	ldr	r2, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	b2ca      	uxtb	r2, r1
 80009aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	0c19      	lsrs	r1, r3, #16
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3302      	adds	r3, #2
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	4413      	add	r3, r2
 80009ba:	b2ca      	uxtb	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	0e19      	lsrs	r1, r3, #24
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3303      	adds	r3, #3
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	4413      	add	r3, r2
 80009cc:	b2ca      	uxtb	r2, r1
 80009ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3304      	adds	r3, #4
 80009d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80009d6:	68fb      	ldr	r3, [r7, #12]
    }
 80009d8:	4618      	mov	r0, r3
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	431a      	orrs	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	685a      	ldr	r2, [r3, #4]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	6839      	ldr	r1, [r7, #0]
 8000a20:	440b      	add	r3, r1
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	431a      	orrs	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3303      	adds	r3, #3
 8000a34:	6839      	ldr	r1, [r7, #0]
 8000a36:	440b      	add	r3, r1
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	061b      	lsls	r3, r3, #24
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	689a      	ldr	r2, [r3, #8]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	440b      	add	r3, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	3302      	adds	r3, #2
 8000a74:	6839      	ldr	r1, [r7, #0]
 8000a76:	440b      	add	r3, r1
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	041b      	lsls	r3, r3, #16
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	689a      	ldr	r2, [r3, #8]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3303      	adds	r3, #3
 8000a8a:	6839      	ldr	r1, [r7, #0]
 8000a8c:	440b      	add	r3, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	061b      	lsls	r3, r3, #24
 8000a92:	431a      	orrs	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3304      	adds	r3, #4
 8000a9c:	60fb      	str	r3, [r7, #12]
     return offset;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    }
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	08006d1c 	.word	0x08006d1c

08000ac8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	08006d2c 	.word	0x08006d2c

08000ae4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fef8 	bl	80008e4 <_ZN3ros3MsgC1Ev>
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b04:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b0a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000b10:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
    {
    }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08006f38 	.word	0x08006f38
 8000b28:	08006d50 	.word	0x08006d50

08000b2c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	8899      	ldrh	r1, [r3, #4]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	b2ca      	uxtb	r2, r1
 8000b46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	889b      	ldrh	r3, [r3, #4]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b299      	uxth	r1, r3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	3301      	adds	r3, #1
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	b2ca      	uxtb	r2, r1
 8000b5a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fb4c 	bl	8000204 <strlen>
 8000b6c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	69b9      	ldr	r1, [r7, #24]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 f8c8 	bl	8001d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	683a      	ldr	r2, [r7, #0]
 8000b86:	18d0      	adds	r0, r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f005 ff9a 	bl	8006ac8 <memcpy>
      offset += length_topic_name;
 8000b94:	69fa      	ldr	r2, [r7, #28]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4413      	add	r3, r2
 8000b9a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fb2f 	bl	8000204 <strlen>
 8000ba6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	4413      	add	r3, r2
 8000bae:	6979      	ldr	r1, [r7, #20]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 f8ab 	bl	8001d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	18d0      	adds	r0, r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f005 ff7d 	bl	8006ac8 <memcpy>
      offset += length_message_type;
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fb12 	bl	8000204 <strlen>
 8000be0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	6939      	ldr	r1, [r7, #16]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f001 f88e 	bl	8001d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	18d0      	adds	r0, r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	4619      	mov	r1, r3
 8000c04:	f005 ff60 	bl	8006ac8 <memcpy>
      offset += length_md5sum;
 8000c08:	69fa      	ldr	r2, [r7, #28]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	695b      	ldr	r3, [r3, #20]
 8000c14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000c16:	68f9      	ldr	r1, [r7, #12]
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	0a19      	lsrs	r1, r3, #8
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b2ca      	uxtb	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	0c19      	lsrs	r1, r3, #16
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3302      	adds	r3, #2
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	0e19      	lsrs	r1, r3, #24
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3303      	adds	r3, #3
 8000c4a:	683a      	ldr	r2, [r7, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	b2ca      	uxtb	r2, r1
 8000c50:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	61fb      	str	r3, [r7, #28]
      return offset;
 8000c58:	69fb      	ldr	r3, [r7, #28]
    }
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b08a      	sub	sp, #40	; 0x28
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	4413      	add	r3, r2
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	889b      	ldrh	r3, [r3, #4]
 8000c82:	b21a      	sxth	r2, r3
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	3301      	adds	r3, #1
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b29a      	uxth	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	683a      	ldr	r2, [r7, #0]
 8000ca6:	441a      	add	r2, r3
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 f84b 	bl	8001d4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cbe:	e00b      	b.n	8000cd8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	441a      	add	r2, r3
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	440b      	add	r3, r1
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4413      	add	r3, r2
 8000cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d3ed      	bcc.n	8000cc0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b01      	subs	r3, #1
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	683a      	ldr	r2, [r7, #0]
 8000cfa:	441a      	add	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	4413      	add	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	441a      	add	r2, r3
 8000d0e:	f107 0310 	add.w	r3, r7, #16
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 f818 	bl	8001d4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	e00b      	b.n	8000d3e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000d26:	683a      	ldr	r2, [r7, #0]
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	441a      	add	r2, r3
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6839      	ldr	r1, [r7, #0]
 8000d32:	440b      	add	r3, r1
 8000d34:	7812      	ldrb	r2, [r2, #0]
 8000d36:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4413      	add	r3, r2
 8000d44:	6a3a      	ldr	r2, [r7, #32]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d3ed      	bcc.n	8000d26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4413      	add	r3, r2
 8000d50:	3b01      	subs	r3, #1
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	441a      	add	r2, r3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	441a      	add	r2, r3
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 ffe5 	bl	8001d4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	3304      	adds	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e00b      	b.n	8000da4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	441a      	add	r2, r3
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	440b      	add	r3, r1
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3ed      	bcc.n	8000d8c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	3b01      	subs	r3, #1
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	441a      	add	r2, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	6839      	ldr	r1, [r7, #0]
 8000dde:	440a      	add	r2, r1
 8000de0:	7812      	ldrb	r2, [r2, #0]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	3301      	adds	r3, #1
 8000dec:	6839      	ldr	r1, [r7, #0]
 8000dee:	440b      	add	r3, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	4313      	orrs	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000df8:	68ba      	ldr	r2, [r7, #8]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	6839      	ldr	r1, [r7, #0]
 8000e00:	440b      	add	r3, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	041b      	lsls	r3, r3, #16
 8000e06:	4313      	orrs	r3, r2
 8000e08:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	3303      	adds	r3, #3
 8000e10:	6839      	ldr	r1, [r7, #0]
 8000e12:	440b      	add	r3, r1
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	061b      	lsls	r3, r3, #24
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000e1c:	68ba      	ldr	r2, [r7, #8]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	3304      	adds	r3, #4
 8000e26:	61bb      	str	r3, [r7, #24]
     return offset;
 8000e28:	69bb      	ldr	r3, [r7, #24]
    }
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	08006d54 	.word	0x08006d54

08000e50 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	08006d70 	.word	0x08006d70

08000e6c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fd34 	bl	80008e4 <_ZN3ros3MsgC1Ev>
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
      level(0),
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	711a      	strb	r2, [r3, #4]
      msg("")
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000e8c:	609a      	str	r2, [r3, #8]
    {
    }
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	08006f20 	.word	0x08006f20
 8000e9c:	08006d50 	.word	0x08006d50

08000ea0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	7912      	ldrb	r2, [r2, #4]
 8000eb8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff f99d 	bl	8000204 <strlen>
 8000eca:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	68b9      	ldr	r1, [r7, #8]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 ff19 	bl	8001d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	3304      	adds	r3, #4
 8000ede:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	18d0      	adds	r0, r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f005 fdeb 	bl	8006ac8 <memcpy>
      offset += length_msg;
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000efa:	68fb      	ldr	r3, [r7, #12]
    }
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	683a      	ldr	r2, [r7, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	3301      	adds	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	441a      	add	r2, r3
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 ff0a 	bl	8001d4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e00b      	b.n	8000f5a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	441a      	add	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	440b      	add	r3, r1
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3ed      	bcc.n	8000f42 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	4413      	add	r3, r2
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	441a      	add	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
     return offset;
 8000f8a:	693b      	ldr	r3, [r7, #16]
    }
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	08006d94 	.word	0x08006d94

08000fb0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	08006da8 	.word	0x08006da8

08000fcc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fc84 	bl	80008e4 <_ZN3ros3MsgC1Ev>
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	601a      	str	r2, [r3, #0]
      ints_length(0), ints(NULL),
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
      floats_length(0), floats(NULL),
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
      strings_length(0), strings(NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	61da      	str	r2, [r3, #28]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08006f08 	.word	0x08006f08

08001014 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6859      	ldr	r1, [r3, #4]
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	4413      	add	r3, r2
 800102c:	b2ca      	uxtb	r2, r1
 800102e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	0a19      	lsrs	r1, r3, #8
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	3301      	adds	r3, #1
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	0c19      	lsrs	r1, r3, #16
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	3302      	adds	r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	b2ca      	uxtb	r2, r1
 8001052:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	0e19      	lsrs	r1, r3, #24
 800105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105c:	3303      	adds	r3, #3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	3304      	adds	r3, #4
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
 8001070:	e02a      	b.n	80010c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	6a3b      	ldr	r3, [r7, #32]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001080:	6939      	ldr	r1, [r7, #16]
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	0a19      	lsrs	r1, r3, #8
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	3301      	adds	r3, #1
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	0c19      	lsrs	r1, r3, #16
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3302      	adds	r3, #2
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	b2ca      	uxtb	r2, r1
 80010aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	0e19      	lsrs	r1, r3, #24
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	3303      	adds	r3, #3
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	b2ca      	uxtb	r2, r1
 80010ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	3304      	adds	r3, #4
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	3301      	adds	r3, #1
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	6a3a      	ldr	r2, [r7, #32]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d3cf      	bcc.n	8001072 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6919      	ldr	r1, [r3, #16]
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	b2ca      	uxtb	r2, r1
 80010de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	0a19      	lsrs	r1, r3, #8
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	0c19      	lsrs	r1, r3, #16
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	3302      	adds	r3, #2
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	b2ca      	uxtb	r2, r1
 8001102:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	0e19      	lsrs	r1, r3, #24
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	3303      	adds	r3, #3
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	4413      	add	r3, r2
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	3304      	adds	r3, #4
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	e02a      	b.n	8001178 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	699a      	ldr	r2, [r3, #24]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001130:	68f9      	ldr	r1, [r7, #12]
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	0a19      	lsrs	r1, r3, #8
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3301      	adds	r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	0c19      	lsrs	r1, r3, #16
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	3302      	adds	r3, #2
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	4413      	add	r3, r2
 8001158:	b2ca      	uxtb	r2, r1
 800115a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	0e19      	lsrs	r1, r3, #24
 8001160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001162:	3303      	adds	r3, #3
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	4413      	add	r3, r2
 8001168:	b2ca      	uxtb	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	3304      	adds	r3, #4
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3301      	adds	r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	429a      	cmp	r2, r3
 8001180:	d3cf      	bcc.n	8001122 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69d9      	ldr	r1, [r3, #28]
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	4413      	add	r3, r2
 800118c:	b2ca      	uxtb	r2, r1
 800118e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	0a19      	lsrs	r1, r3, #8
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	3301      	adds	r3, #1
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	b2ca      	uxtb	r2, r1
 80011a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	0c19      	lsrs	r1, r3, #16
 80011a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011aa:	3302      	adds	r3, #2
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	b2ca      	uxtb	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69db      	ldr	r3, [r3, #28]
 80011b8:	0e19      	lsrs	r1, r3, #24
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	3303      	adds	r3, #3
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2ca      	uxtb	r2, r1
 80011c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	3304      	adds	r3, #4
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	e027      	b.n	8001222 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f810 	bl	8000204 <strlen>
 80011e4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	6979      	ldr	r1, [r7, #20]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fd8c 	bl	8001d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3304      	adds	r3, #4
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	18d0      	adds	r0, r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4619      	mov	r1, r3
 8001210:	f005 fc5a 	bl	8006ac8 <memcpy>
      offset += length_stringsi;
 8001214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	4413      	add	r3, r2
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	3301      	adds	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3d2      	bcc.n	80011d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800122e:	4618      	mov	r0, r3
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001236:	b580      	push	{r7, lr}
 8001238:	b08e      	sub	sp, #56	; 0x38
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	4413      	add	r3, r2
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800124e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001250:	3301      	adds	r3, #1
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	6a3a      	ldr	r2, [r7, #32]
 800125c:	4313      	orrs	r3, r2
 800125e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	3302      	adds	r3, #2
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	041b      	lsls	r3, r3, #16
 800126c:	6a3a      	ldr	r2, [r7, #32]
 800126e:	4313      	orrs	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001274:	3303      	adds	r3, #3
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	061b      	lsls	r3, r3, #24
 800127e:	6a3a      	ldr	r2, [r7, #32]
 8001280:	4313      	orrs	r3, r2
 8001282:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001286:	3304      	adds	r3, #4
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	6a3a      	ldr	r2, [r7, #32]
 8001290:	429a      	cmp	r2, r3
 8001292:	d90a      	bls.n	80012aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	6a3b      	ldr	r3, [r7, #32]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f005 fba6 	bl	80069f0 <realloc>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a3a      	ldr	r2, [r7, #32]
 80012ae:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
 80012b4:	e035      	b.n	8001322 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	440a      	add	r2, r1
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	3301      	adds	r3, #1
 80012ce:	6839      	ldr	r1, [r7, #0]
 80012d0:	440b      	add	r3, r1
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012de:	3302      	adds	r3, #2
 80012e0:	6839      	ldr	r1, [r7, #0]
 80012e2:	440b      	add	r3, r1
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	4313      	orrs	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	3303      	adds	r3, #3
 80012f2:	6839      	ldr	r1, [r7, #0]
 80012f4:	440b      	add	r3, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	4313      	orrs	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	3304      	adds	r3, #4
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68da      	ldr	r2, [r3, #12]
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131e:	3301      	adds	r3, #1
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001328:	429a      	cmp	r2, r3
 800132a:	d3c4      	bcc.n	80012b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001338:	3301      	adds	r3, #1
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4313      	orrs	r3, r2
 8001346:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	3302      	adds	r3, #2
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	4413      	add	r3, r2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	041b      	lsls	r3, r3, #16
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	4313      	orrs	r3, r2
 8001358:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	3303      	adds	r3, #3
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	4413      	add	r3, r2
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	4313      	orrs	r3, r2
 800136a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800136c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136e:	3304      	adds	r3, #4
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	429a      	cmp	r2, r3
 800137a:	d90a      	bls.n	8001392 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f005 fb32 	bl	80069f0 <realloc>
 800138c:	4602      	mov	r2, r0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139c:	e035      	b.n	800140a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	440a      	add	r2, r1
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b4:	3301      	adds	r3, #1
 80013b6:	6839      	ldr	r1, [r7, #0]
 80013b8:	440b      	add	r3, r1
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c6:	3302      	adds	r3, #2
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	440b      	add	r3, r1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	041b      	lsls	r3, r3, #16
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d8:	3303      	adds	r3, #3
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	3304      	adds	r3, #4
 80013f0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	3214      	adds	r2, #20
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001406:	3301      	adds	r3, #1
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001410:	429a      	cmp	r2, r3
 8001412:	d3c4      	bcc.n	800139e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800141e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001420:	3301      	adds	r3, #1
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	021b      	lsls	r3, r3, #8
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001432:	3302      	adds	r3, #2
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	041b      	lsls	r3, r3, #16
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001444:	3303      	adds	r3, #3
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	4413      	add	r3, r2
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001456:	3304      	adds	r3, #4
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	429a      	cmp	r2, r3
 8001462:	d90a      	bls.n	800147a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f005 fabe 	bl	80069f0 <realloc>
 8001474:	4602      	mov	r2, r0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
 8001484:	e03e      	b.n	8001504 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	441a      	add	r2, r3
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f000 fc59 	bl	8001d4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149a:	3304      	adds	r3, #4
 800149c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800149e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
 80014a2:	e00b      	b.n	80014bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	441a      	add	r2, r3
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3b01      	subs	r3, #1
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	440b      	add	r3, r1
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	3301      	adds	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d3ed      	bcc.n	80014a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80014c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	3b01      	subs	r3, #1
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80014d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014da:	3b01      	subs	r3, #1
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	441a      	add	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80014e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	3220      	adds	r2, #32
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80014fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001500:	3301      	adds	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800150a:	429a      	cmp	r2, r3
 800150c:	d3bb      	bcc.n	8001486 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 800150e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001510:	4618      	mov	r0, r3
 8001512:	3738      	adds	r7, #56	; 0x38
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001522:	4618      	mov	r0, r3
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	08006e74 	.word	0x08006e74

08001534 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	08006dcc 	.word	0x08006dcc

08001550 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68d8      	ldr	r0, [r3, #12]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6891      	ldr	r1, [r2, #8]
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	4798      	blx	r3
 800159c:	4603      	mov	r3, r0
  };
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
  }
 80015b2:	4618      	mov	r0, r3
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80015d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <_ZN13STM32HardwareC1Ev+0x3c>)
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001600:	461a      	mov	r2, r3
 8001602:	2300      	movs	r3, #0
 8001604:	6093      	str	r3, [r2, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160c:	461a      	mov	r2, r3
 800160e:	2300      	movs	r3, #0
 8001610:	60d3      	str	r3, [r2, #12]
    }
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	200000c4 	.word	0x200000c4

08001624 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f804 	bl	800163a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3304      	adds	r3, #4
 800164a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800164e:	4619      	mov	r1, r3
 8001650:	f004 f8be 	bl	80057d0 <HAL_UART_Receive_DMA>
    }
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_ZN13STM32Hardware4readEv>:

    int read(){
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ffa4 	bl	80015be <_ZN13STM32Hardware10getRdmaIndEv>
 8001676:	4603      	mov	r3, r0
 8001678:	429c      	cmp	r4, r3
 800167a:	bf14      	ite	ne
 800167c:	2301      	movne	r3, #1
 800167e:	2300      	moveq	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d012      	beq.n	80016ac <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800168c:	1c59      	adds	r1, r3, #1
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80016a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 80016ac:	68fb      	ldr	r3, [r7, #12]
    }
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd90      	pop	{r4, r7, pc}
	...

080016b8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d108      	bne.n	80016e0 <_ZN13STM32Hardware5flushEv+0x28>
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <_ZN13STM32Hardware5flushEv+0xcc>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <_ZN13STM32Hardware5flushEv+0x28>
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <_ZN13STM32Hardware5flushEv+0x2a>
 80016e0:	2300      	movs	r3, #0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d049      	beq.n	800177a <_ZN13STM32Hardware5flushEv+0xc2>
        mutex = true;
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <_ZN13STM32Hardware5flushEv+0xcc>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d039      	beq.n	8001774 <_ZN13STM32Hardware5flushEv+0xbc>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	429a      	cmp	r2, r3
 8001712:	d20c      	bcs.n	800172e <_ZN13STM32Hardware5flushEv+0x76>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	b29b      	uxth	r3, r3
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	e007      	b.n	800173e <_ZN13STM32Hardware5flushEv+0x86>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	b29b      	uxth	r3, r3
 8001738:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800173c:	b29b      	uxth	r3, r3
 800173e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4413      	add	r3, r2
 8001754:	89fa      	ldrh	r2, [r7, #14]
 8001756:	4619      	mov	r1, r3
 8001758:	f003 ffbc 	bl	80056d4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	89fb      	ldrh	r3, [r7, #14]
 8001766:	4413      	add	r3, r2
 8001768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001772:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <_ZN13STM32Hardware5flushEv+0xcc>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
      }
    }
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200001cc 	.word	0x200001cc

08001788 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
      int n = length;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800179e:	bfa8      	it	ge
 80017a0:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80017a4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	bf28      	it	cs
 80017b8:	4613      	movcs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 f979 	bl	8006ac8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	4413      	add	r3, r2
 80017e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ec:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d00b      	beq.n	800180e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	18d1      	adds	r1, r2, r3
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	461a      	mov	r2, r3
 800180a:	f005 f95d 	bl	8006ac8 <memcpy>
      }

      flush();
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff ff52 	bl	80016b8 <_ZN13STM32Hardware5flushEv>
    }
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	f001 fc1e 	bl	8003064 <HAL_GetTick>
 8001828:	4603      	mov	r3, r0
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
      data(0)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f850 	bl	80008e4 <_ZN3ros3MsgC1Ev>
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	08006ec4 	.word	0x08006ec4

08001868 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800187c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001880:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001884:	6979      	ldr	r1, [r7, #20]
 8001886:	6838      	ldr	r0, [r7, #0]
 8001888:	4401      	add	r1, r0
 800188a:	b2d3      	uxtb	r3, r2
 800188c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800188e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	0a02      	lsrs	r2, r0, #8
 800189c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80018a0:	0a0b      	lsrs	r3, r1, #8
 80018a2:	6979      	ldr	r1, [r7, #20]
 80018a4:	3101      	adds	r1, #1
 80018a6:	6838      	ldr	r0, [r7, #0]
 80018a8:	4401      	add	r1, r0
 80018aa:	b2d3      	uxtb	r3, r2
 80018ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80018ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	0c02      	lsrs	r2, r0, #16
 80018bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80018c0:	0c0b      	lsrs	r3, r1, #16
 80018c2:	6979      	ldr	r1, [r7, #20]
 80018c4:	3102      	adds	r1, #2
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	4401      	add	r1, r0
 80018ca:	b2d3      	uxtb	r3, r2
 80018cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80018ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	0e02      	lsrs	r2, r0, #24
 80018dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018e0:	0e0b      	lsrs	r3, r1, #24
 80018e2:	6979      	ldr	r1, [r7, #20]
 80018e4:	3103      	adds	r1, #3
 80018e6:	6838      	ldr	r0, [r7, #0]
 80018e8:	4401      	add	r1, r0
 80018ea:	b2d3      	uxtb	r3, r2
 80018ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80018ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	000a      	movs	r2, r1
 80018fc:	2300      	movs	r3, #0
 80018fe:	6979      	ldr	r1, [r7, #20]
 8001900:	3104      	adds	r1, #4
 8001902:	6838      	ldr	r0, [r7, #0]
 8001904:	4401      	add	r1, r0
 8001906:	b2d3      	uxtb	r3, r2
 8001908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800190a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	0a0a      	lsrs	r2, r1, #8
 8001918:	2300      	movs	r3, #0
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	3105      	adds	r1, #5
 800191e:	6838      	ldr	r0, [r7, #0]
 8001920:	4401      	add	r1, r0
 8001922:	b2d3      	uxtb	r3, r2
 8001924:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8001926:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	0c0a      	lsrs	r2, r1, #16
 8001934:	2300      	movs	r3, #0
 8001936:	6979      	ldr	r1, [r7, #20]
 8001938:	3106      	adds	r1, #6
 800193a:	6838      	ldr	r0, [r7, #0]
 800193c:	4401      	add	r1, r0
 800193e:	b2d3      	uxtb	r3, r2
 8001940:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8001942:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	0e0a      	lsrs	r2, r1, #24
 8001950:	2300      	movs	r3, #0
 8001952:	6979      	ldr	r1, [r7, #20]
 8001954:	3107      	adds	r1, #7
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	4401      	add	r1, r0
 800195a:	b2d3      	uxtb	r3, r2
 800195c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3308      	adds	r3, #8
 8001962:	617b      	str	r3, [r7, #20]
      return offset;
 8001964:	697b      	ldr	r3, [r7, #20]
    }
 8001966:	4618      	mov	r0, r3
 8001968:	371c      	adds	r7, #28
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001972:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001976:	b0a3      	sub	sp, #140	; 0x8c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6778      	str	r0, [r7, #116]	; 0x74
 800197c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001990:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001994:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001998:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800199a:	4413      	add	r3, r2
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	461c      	mov	r4, r3
 80019a4:	4615      	mov	r5, r2
 80019a6:	ea40 0804 	orr.w	r8, r0, r4
 80019aa:	ea41 0905 	orr.w	r9, r1, r5
 80019ae:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80019b2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2200      	movs	r2, #0
 80019c6:	469a      	mov	sl, r3
 80019c8:	4693      	mov	fp, r2
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80019d6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80019da:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80019de:	ea40 0402 	orr.w	r4, r0, r2
 80019e2:	66bc      	str	r4, [r7, #104]	; 0x68
 80019e4:	430b      	orrs	r3, r1
 80019e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80019e8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80019ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80019f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80019f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019f8:	1c9a      	adds	r2, r3, #2
 80019fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2200      	movs	r2, #0
 8001a04:	663b      	str	r3, [r7, #96]	; 0x60
 8001a06:	667a      	str	r2, [r7, #100]	; 0x64
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001a14:	464c      	mov	r4, r9
 8001a16:	0423      	lsls	r3, r4, #16
 8001a18:	4644      	mov	r4, r8
 8001a1a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8001a1e:	4644      	mov	r4, r8
 8001a20:	0422      	lsls	r2, r4, #16
 8001a22:	ea40 0402 	orr.w	r4, r0, r2
 8001a26:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a2c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001a30:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a34:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a3c:	1cda      	adds	r2, r3, #3
 8001a3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2200      	movs	r2, #0
 8001a48:	653b      	str	r3, [r7, #80]	; 0x50
 8001a4a:	657a      	str	r2, [r7, #84]	; 0x54
 8001a4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a50:	4623      	mov	r3, r4
 8001a52:	0a1b      	lsrs	r3, r3, #8
 8001a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a56:	4623      	mov	r3, r4
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a5c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001a60:	4623      	mov	r3, r4
 8001a62:	4303      	orrs	r3, r0
 8001a64:	643b      	str	r3, [r7, #64]	; 0x40
 8001a66:	462b      	mov	r3, r5
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a6c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001a70:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001a74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a7c:	1d1a      	adds	r2, r3, #4
 8001a7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a80:	4413      	add	r3, r2
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2200      	movs	r2, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a8a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8001a96:	0023      	movs	r3, r4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	ea40 0402 	orr.w	r4, r0, r2
 8001a9e:	633c      	str	r4, [r7, #48]	; 0x30
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001aa8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001aac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ab0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ab4:	1d5a      	adds	r2, r3, #5
 8001ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ab8:	4413      	add	r3, r2
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001ace:	0223      	lsls	r3, r4, #8
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	ea40 0402 	orr.w	r4, r0, r2
 8001ad6:	623c      	str	r4, [r7, #32]
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
 8001adc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001ae0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001ae4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001ae8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aec:	3306      	adds	r3, #6
 8001aee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2200      	movs	r2, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	61fa      	str	r2, [r7, #28]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	69bc      	ldr	r4, [r7, #24]
 8001b06:	0423      	lsls	r3, r4, #16
 8001b08:	2200      	movs	r2, #0
 8001b0a:	ea40 0402 	orr.w	r4, r0, r2
 8001b0e:	613c      	str	r4, [r7, #16]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001b18:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001b1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b24:	3307      	adds	r3, #7
 8001b26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	60fa      	str	r2, [r7, #12]
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	68bc      	ldr	r4, [r7, #8]
 8001b3e:	0623      	lsls	r3, r4, #24
 8001b40:	2200      	movs	r2, #0
 8001b42:	ea40 0402 	orr.w	r4, r0, r2
 8001b46:	603c      	str	r4, [r7, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b50:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8001b54:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001b58:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8001b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b62:	3308      	adds	r3, #8
 8001b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8001b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	378c      	adds	r7, #140	; 0x8c
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b76:	4770      	bx	lr

08001b78 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	08006df0 	.word	0x08006df0

08001b94 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	08006e00 	.word	0x08006e00

08001bb0 <_Z8callbackRKN8std_msgs5Int64E>:
int count;
std_msgs::Int64 test;


void callback(const std_msgs::Int64 &msg)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bbe:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8001bc0:	601a      	str	r2, [r3, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	200001d0 	.word	0x200001d0

08001bd4 <publish>:

ros::NodeHandle nh;
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
ros::Publisher pub("text", &test);

void publish(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	test.data = 1;
 8001bd8:	4906      	ldr	r1, [pc, #24]	; (8001bf4 <publish+0x20>)
 8001bda:	f04f 0201 	mov.w	r2, #1
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pub.publish(&test);
 8001be6:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <publish+0x20>)
 8001be8:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <publish+0x24>)
 8001bea:	f7ff fcc8 	bl	800157e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200001d8 	.word	0x200001d8
 8001bf8:	20001750 	.word	0x20001750

08001bfc <_Z13Error_Handlerv>:
/* UART Communication */
void Error_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c00:	b672      	cpsid	i
}
 8001c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <_Z13Error_Handlerv+0x8>
	...

08001c08 <_ZL19MX_USART2_UART_Initv>:
  }
  /* USER CODE END Error_Handler_Debug */
}

static void MX_USART2_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c0e:	4a14      	ldr	r2, [pc, #80]	; (8001c60 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3e:	4807      	ldr	r0, [pc, #28]	; (8001c5c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001c40:	f003 fccc 	bl	80055dc <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	bf14      	ite	ne
 8001c4a:	2301      	movne	r3, #1
 8001c4c:	2300      	moveq	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001c54:	f7ff ffd2 	bl	8001bfc <_Z13Error_Handlerv>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200000c4 	.word	0x200000c4
 8001c60:	40004400 	.word	0x40004400

08001c64 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    if(huart == &huart2){
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_UART_ErrorCallback+0x38>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10e      	bne.n	8001c92 <HAL_UART_ErrorCallback+0x2e>
    // set velocity 0 before uart reinitialization
    	count = 0;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_UART_ErrorCallback+0x3c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

		HAL_UART_DeInit(&huart2);
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <HAL_UART_ErrorCallback+0x38>)
 8001c7c:	f003 fcfb 	bl	8005676 <HAL_UART_DeInit>
		MX_USART2_UART_Init();
 8001c80:	f7ff ffc2 	bl	8001c08 <_ZL19MX_USART2_UART_Initv>
		nh.getHardware()->init();
 8001c84:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <HAL_UART_ErrorCallback+0x40>)
 8001c86:	f000 f965 	bl	8001f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fcc9 	bl	8001624 <_ZN13STM32Hardware4initEv>
    }
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200000c4 	.word	0x200000c4
 8001ca0:	200001d0 	.word	0x200001d0
 8001ca4:	200001e8 	.word	0x200001e8

08001ca8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_UART_TxCpltCallback+0x20>)
 8001cb2:	f000 f94f 	bl	8001f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fcfd 	bl	80016b8 <_ZN13STM32Hardware5flushEv>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001e8 	.word	0x200001e8

08001ccc <setup>:

void setup(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    nh.initNode();
 8001cd0:	4806      	ldr	r0, [pc, #24]	; (8001cec <setup+0x20>)
 8001cd2:	f000 f94b 	bl	8001f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8001cd6:	4906      	ldr	r1, [pc, #24]	; (8001cf0 <setup+0x24>)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <setup+0x20>)
 8001cda:	f000 f970 	bl	8001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub);
 8001cde:	4905      	ldr	r1, [pc, #20]	; (8001cf4 <setup+0x28>)
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <setup+0x20>)
 8001ce2:	f000 f997 	bl	8002014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200001e8 	.word	0x200001e8
 8001cf0:	20001728 	.word	0x20001728
 8001cf4:	20001750 	.word	0x20001750

08001cf8 <loop>:
void loop(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <loop+0x10>)
 8001cfe:	f000 f9b9 	bl	8002074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200001e8 	.word	0x200001e8

08001d0c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	e00c      	b.n	8001d36 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	fa22 f103 	lsr.w	r1, r2, r3
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b2ca      	uxtb	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3301      	adds	r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d9ef      	bls.n	8001d1c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e010      	b.n	8001d82 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6839      	ldr	r1, [r7, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	440a      	add	r2, r1
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	431a      	orrs	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d9eb      	bls.n	8001d60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	08006ef4 	.word	0x08006ef4

08001db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ffe8 	bl	8001d98 <_ZN3ros15NodeHandleBase_C1Ev>
 8001dc8:	4a47      	ldr	r2, [pc, #284]	; (8001ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fc06 	bl	80015e4 <_ZN13STM32HardwareC1Ev>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8001dea:	3314      	adds	r3, #20
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f8ed 	bl	8000fcc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e00a      	b.n	8001e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b18      	cmp	r3, #24
 8001e12:	d9f1      	bls.n	8001df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x40>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	e009      	b.n	8001e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8001e22:	2100      	movs	r1, #0
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b18      	cmp	r3, #24
 8001e32:	d9f2      	bls.n	8001e1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x62>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	e00a      	b.n	8001e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001e44:	3304      	adds	r3, #4
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e56:	d3f0      	bcc.n	8001e3a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x82>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	e00a      	b.n	8001e74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xbc>
      message_out[i] = 0;
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e7a:	d3f0      	bcc.n	8001e5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa6>

    req_param_resp.ints_length = 0;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	461a      	mov	r2, r3
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e90:	461a      	mov	r2, r3
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	461a      	mov	r2, r3
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	6213      	str	r3, [r2, #32]
  }
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	08006eb0 	.word	0x08006eb0

08001eec <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	08006edc 	.word	0x08006edc

08001f0c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ffe5 	bl	8001eec <_ZN3ros11Subscriber_C1Ev>
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3310      	adds	r3, #16
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fc81 	bl	8001834 <_ZN8std_msgs5Int64C1Ev>
    cb_(cb),
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	621a      	str	r2, [r3, #32]
    endpoint_(endpoint)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  {
    topic_ = topic_name;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	609a      	str	r2, [r3, #8]
  };
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	08006e98 	.word	0x08006e98

08001f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
  }
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3304      	adds	r3, #4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fb53 	bl	8001624 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f84:	461a      	mov	r2, r3
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f92:	461a      	mov	r2, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e018      	b.n	8002000 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8001fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x3c>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
        return true;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e006      	b.n	8002008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b18      	cmp	r3, #24
 8002004:	dde3      	ble.n	8001fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x10>
      }
    }
    return false;
 8002006:	2300      	movs	r3, #0
  }
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e01d      	b.n	8002060 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d111      	bne.n	800205a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	60da      	str	r2, [r3, #12]
        return true;
 8002056:	2301      	movs	r3, #1
 8002058:	e006      	b.n	8002068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3301      	adds	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b18      	cmp	r3, #24
 8002064:	ddde      	ble.n	8002024 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8002066:	2300      	movs	r3, #0
  }
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	  uint32_t c_time = hardware_.time();
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fbcb 	bl	800181c <_ZN13STM32Hardware4timeEv>
 8002086:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800209a:	4293      	cmp	r3, r2
 800209c:	d905      	bls.n	80020aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00e      	beq.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d906      	bls.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ce:	461a      	mov	r2, r3
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3304      	adds	r3, #4
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fb98 	bl	800181c <_ZN13STM32Hardware4timeEv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad2      	subs	r2, r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	bf8c      	ite	hi
 80020fe:	2301      	movhi	r3, #1
 8002100:	2300      	movls	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8002108:	f06f 0301 	mvn.w	r3, #1
 800210c:	e226      	b.n	800255c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3304      	adds	r3, #4
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff faa2 	bl	800165c <_ZN13STM32Hardware4readEv>
 8002118:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f2c0 81ff 	blt.w	8002520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002128:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4413      	add	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002136:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002140:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002144:	2b07      	cmp	r3, #7
 8002146:	d12d      	bne.n	80021a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214e:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800215a:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	b2d1      	uxtb	r1, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800216a:	3304      	adds	r3, #4
 800216c:	460a      	mov	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002176:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800217a:	3b01      	subs	r3, #1
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002182:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800218c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1a0      	bne.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800219a:	461a      	mov	r2, r3
 800219c:	2308      	movs	r3, #8
 800219e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80021a2:	e798      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d130      	bne.n	8002214 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2bff      	cmp	r3, #255	; 0xff
 80021b6:	d112      	bne.n	80021de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80021c2:	3301      	adds	r3, #1
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ca:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	3314      	adds	r3, #20
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021d8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80021dc:	e77b      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fb1a 	bl	800181c <_ZN13STM32Hardware4timeEv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	bf8c      	ite	hi
 80021f6:	2301      	movhi	r3, #1
 80021f8:	2300      	movls	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f43f af6a 	beq.w	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800220e:	f06f 0301 	mvn.w	r3, #1
 8002212:	e1a3      	b.n	800255c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800221e:	2b01      	cmp	r3, #1
 8002220:	d121      	bne.n	8002266 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2bfe      	cmp	r3, #254	; 0xfe
 8002226:	d10b      	bne.n	8002240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002232:	3301      	adds	r3, #1
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800223a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800223e:	e74a      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	461a      	mov	r2, r3
 8002248:	2300      	movs	r3, #0
 800224a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002254:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8002258:	2b00      	cmp	r3, #0
 800225a:	f47f af3c 	bne.w	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f980 	bl	8002564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002264:	e737      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002270:	2b02      	cmp	r3, #2
 8002272:	d120      	bne.n	80022b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002288:	461a      	mov	r2, r3
 800228a:	2300      	movs	r3, #0
 800228c:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002296:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800229a:	3301      	adds	r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022a2:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ac:	461a      	mov	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80022b4:	e70f      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d118      	bne.n	80022f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ca:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	4413      	add	r3, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022da:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80022e8:	3301      	adds	r3, #1
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022f0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80022f4:	e6ef      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002300:	2b04      	cmp	r3, #4
 8002302:	d11f      	bne.n	8002344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800230e:	425a      	negs	r2, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	bf58      	it	pl
 8002316:	4253      	negpl	r3, r2
 8002318:	2bff      	cmp	r3, #255	; 0xff
 800231a:	d10b      	bne.n	8002334 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002322:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800232e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002332:	e6d0      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	461a      	mov	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8002342:	e6c8      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800234e:	2b05      	cmp	r3, #5
 8002350:	d119      	bne.n	8002386 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002358:	461a      	mov	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002366:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800236a:	3301      	adds	r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002372:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8002384:	e6a7      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8002390:	2b06      	cmp	r3, #6
 8002392:	d123      	bne.n	80023dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239a:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	4413      	add	r3, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023aa:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	461a      	mov	r2, r3
 80023b6:	2307      	movs	r3, #7
 80023b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f47f ae85 	bne.w	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	461a      	mov	r2, r3
 80023d4:	2308      	movs	r3, #8
 80023d6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80023da:	e67c      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	f47f ae75 	bne.w	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023f2:	461a      	mov	r2, r3
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002404:	425a      	negs	r2, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	bf58      	it	pl
 800240c:	4253      	negpl	r3, r2
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	f47f ae61 	bne.w	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f89e 	bl	8002564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f8ba 	bl	80025a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002434:	461a      	mov	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	e085      	b.n	800255c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800245a:	2b0a      	cmp	r3, #10
 800245c:	d108      	bne.n	8002470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002464:	3304      	adds	r3, #4
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f97b 	bl	8002764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800246e:	e632      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d112      	bne.n	80024a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8002484:	3314      	adds	r3, #20
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
 800248c:	3204      	adds	r2, #4
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fed0 	bl	8001236 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 80024a2:	e618      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80024ae:	2b0b      	cmp	r3, #11
 80024b0:	d106      	bne.n	80024c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80024be:	e60a      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024c6:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80024ca:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80024d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f43f adfc 	beq.w	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80024e8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80024f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024fc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8002500:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800250a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8002518:	3304      	adds	r3, #4
 800251a:	4619      	mov	r1, r3
 800251c:	4790      	blx	r2
    while (true)
 800251e:	e5da      	b.n	80020d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8002520:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002528:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800252c:	2b00      	cmp	r3, #0
 800252e:	d014      	beq.n	800255a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002536:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002542:	4293      	cmp	r3, r2
 8002544:	d909      	bls.n	800255a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f80c 	bl	8002564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 800255a:	2300      	movs	r3, #0
  }
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe f9c7 	bl	8000904 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f107 020c 	add.w	r2, r7, #12
 8002580:	210a      	movs	r1, #10
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
    rt_time = hardware_.time();
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff f946 	bl	800181c <_ZN13STM32Hardware4timeEv>
 8002590:	4602      	mov	r2, r0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	615a      	str	r2, [r3, #20]
  }
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80025a2:	b590      	push	{r4, r7, lr}
 80025a4:	b08b      	sub	sp, #44	; 0x2c
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fa98 	bl	8000ae4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
 80025b8:	e062      	b.n	8002680 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d056      	beq.n	800267a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3308      	adds	r3, #8
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4608      	mov	r0, r1
 800261a:	4798      	blx	r3
 800261c:	4603      	mov	r3, r0
 800261e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4608      	mov	r0, r1
 8002648:	4798      	blx	r3
 800264a:	4603      	mov	r3, r0
 800264c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800264e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002652:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681c      	ldr	r4, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe ff9c 	bl	80015a6 <_ZN3ros9Publisher15getEndpointTypeEv>
 800266e:	4601      	mov	r1, r0
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	461a      	mov	r2, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	3301      	adds	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	2b18      	cmp	r3, #24
 8002684:	dd99      	ble.n	80025ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	e05e      	b.n	800274a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8002694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d053      	beq.n	8002744 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80026a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80026c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80026d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3308      	adds	r3, #8
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4608      	mov	r0, r1
 80026de:	4798      	blx	r3
 80026e0:	4603      	mov	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80026ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4608      	mov	r0, r1
 8002704:	4798      	blx	r3
 8002706:	4603      	mov	r3, r0
 8002708:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800270a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681c      	ldr	r4, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800271e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002726:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	3304      	adds	r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4608      	mov	r0, r1
 8002736:	4798      	blx	r3
 8002738:	4601      	mov	r1, r0
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	461a      	mov	r2, r3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3301      	adds	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2b18      	cmp	r3, #24
 800274e:	dd9d      	ble.n	800268c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 800275c:	bf00      	nop
 800275e:	372c      	adds	r7, #44	; 0x2c
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe f8c6 	bl	8000904 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff f84d 	bl	800181c <_ZN13STM32Hardware4timeEv>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	6839      	ldr	r1, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe f924 	bl	80009e4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	4915      	ldr	r1, [pc, #84]	; (80027f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80027a2:	fba1 1303 	umull	r1, r3, r1, r3
 80027a6:	099b      	lsrs	r3, r3, #6
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80027ac:	6939      	ldr	r1, [r7, #16]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80027b2:	fba3 0302 	umull	r0, r3, r3, r2
 80027b6:	099b      	lsrs	r3, r3, #6
 80027b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027bc:	fb00 f303 	mul.w	r3, r0, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	440b      	add	r3, r1
 80027ca:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	3304      	adds	r3, #4
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f8bf 	bl	8002958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	3304      	adds	r3, #4
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff f81c 	bl	800181c <_ZN13STM32Hardware4timeEv>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ec:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	10624dd3 	.word	0x10624dd3
 80027fc:	000f4240 	.word	0x000f4240

08002800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b63      	cmp	r3, #99	; 0x63
 8002810:	dd0b      	ble.n	800282a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002818:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8002826:	2300      	movs	r3, #0
 8002828:	e090      	b.n	800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8002836:	3304      	adds	r3, #4
 8002838:	3307      	adds	r3, #7
 800283a:	4619      	mov	r1, r3
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4790      	blx	r2
 8002840:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	22ff      	movs	r2, #255	; 0xff
 800284a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002854:	22fe      	movs	r2, #254	; 0xfe
 8002856:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002864:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	b29b      	uxth	r3, r3
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29b      	uxth	r3, r3
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002878:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002882:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8002890:	4413      	add	r3, r2
 8002892:	b2db      	uxtb	r3, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800289e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ac:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	121b      	asrs	r3, r3, #8
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c0:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80028c8:	2305      	movs	r3, #5
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	e00d      	b.n	80028ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80028d8:	3304      	adds	r3, #4
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	3301      	adds	r3, #1
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3306      	adds	r3, #6
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	ddec      	ble.n	80028ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	3307      	adds	r3, #7
 80028f8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	425a      	negs	r2, r3
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	bf58      	it	pl
 8002904:	4253      	negpl	r3, r2
 8002906:	b2da      	uxtb	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1c59      	adds	r1, r3, #1
 800290c:	6179      	str	r1, [r7, #20]
 800290e:	43d2      	mvns	r2, r2
 8002910:	b2d1      	uxtb	r1, r2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 800291a:	3304      	adds	r3, #4
 800291c:	460a      	mov	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002926:	dc0b      	bgt.n	8002940 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	1d18      	adds	r0, r3, #4
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8002932:	3304      	adds	r3, #4
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe ff26 	bl	8001788 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	e005      	b.n	800294c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f84c 	bl	80029e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800294c:	4618      	mov	r0, r3
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	08006e24 	.word	0x08006e24

08002958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3304      	adds	r3, #4
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe ff58 	bl	800181c <_ZN13STM32Hardware4timeEv>
 800296c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4917      	ldr	r1, [pc, #92]	; (80029d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002976:	fba1 1303 	umull	r1, r3, r1, r3
 800297a:	099b      	lsrs	r3, r3, #6
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002986:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8002990:	fba3 0302 	umull	r0, r3, r3, r2
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299a:	fb00 f303 	mul.w	r3, r0, r3
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	1aca      	subs	r2, r1, r3
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 80029aa:	4413      	add	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029b2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029ba:	3318      	adds	r3, #24
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029c2:	321c      	adds	r2, #28
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fda2 	bl	8000510 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	10624dd3 	.word	0x10624dd3
 80029d8:	000f4240 	.word	0x000f4240
 80029dc:	3b9aca00 	.word	0x3b9aca00

080029e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	2103      	movs	r1, #3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f804 	bl	80029fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	460b      	mov	r3, r1
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fa2c 	bl	8000e6c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002a14:	7afb      	ldrb	r3, [r7, #11]
 8002a16:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f107 0214 	add.w	r2, r7, #20
 8002a26:	2107      	movs	r1, #7
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	4798      	blx	r3
  }
 8002a2c:	bf00      	nop
 8002a2e:	3720      	adds	r7, #32
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_Z41__static_initialization_and_destruction_0ii>:
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d116      	bne.n	8002a72 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <_Z41__static_initialization_and_destruction_0ii+0x3e>
std_msgs::Int64 test;
 8002a4e:	480b      	ldr	r0, [pc, #44]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002a50:	f7fe fef0 	bl	8001834 <_ZN8std_msgs5Int64C1Ev>
ros::NodeHandle nh;
 8002a54:	480a      	ldr	r0, [pc, #40]	; (8002a80 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002a56:	f7ff f9af 	bl	8001db8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8002a60:	480a      	ldr	r0, [pc, #40]	; (8002a8c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8002a62:	f7ff fa53 	bl	8001f0c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub("text", &test);
 8002a66:	2300      	movs	r3, #0
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002a6a:	4909      	ldr	r1, [pc, #36]	; (8002a90 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002a6c:	4809      	ldr	r0, [pc, #36]	; (8002a94 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8002a6e:	f7fe fd6f 	bl	8001550 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200001d8 	.word	0x200001d8
 8002a80:	200001e8 	.word	0x200001e8
 8002a84:	08001bb1 	.word	0x08001bb1
 8002a88:	08006e60 	.word	0x08006e60
 8002a8c:	20001728 	.word	0x20001728
 8002a90:	08006e6c 	.word	0x08006e6c
 8002a94:	20001750 	.word	0x20001750

08002a98 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3310      	adds	r3, #16
 8002aa6:	6839      	ldr	r1, [r7, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe ff62 	bl	8001972 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	3210      	adds	r2, #16
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4798      	blx	r3
  }
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8002ace:	4618      	mov	r0, r3
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3310      	adds	r3, #16
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f846 	bl	8001b78 <_ZN8std_msgs5Int647getTypeEv>
 8002aec:	4603      	mov	r3, r0
  }
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b082      	sub	sp, #8
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3310      	adds	r3, #16
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff f846 	bl	8001b94 <_ZN8std_msgs5Int646getMD5Ev>
 8002b08:	4603      	mov	r3, r0
  }
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
    return configured_;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b20:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8002b24:	4618      	mov	r0, r3
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <_GLOBAL__sub_I_count>:
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f7ff ff7b 	bl	8002a34 <_Z41__static_initialization_and_destruction_0ii>
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_MspInit+0x4c>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_MspInit+0x4c>)
 8002b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_MspInit+0x4c>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5e:	607b      	str	r3, [r7, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_MspInit+0x4c>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_MspInit+0x4c>)
 8002b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_MspInit+0x4c>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b7e:	2007      	movs	r0, #7
 8002b80:	f000 fb70 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40023800 	.word	0x40023800

08002b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1a      	ldr	r2, [pc, #104]	; (8002c08 <HAL_TIM_Base_MspInit+0x78>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12d      	bne.n	8002bfe <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_TIM_Base_MspInit+0x7c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a18      	ldr	r2, [pc, #96]	; (8002c0c <HAL_TIM_Base_MspInit+0x7c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_TIM_Base_MspInit+0x7c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	2018      	movs	r0, #24
 8002bc4:	f000 fb59 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002bc8:	2018      	movs	r0, #24
 8002bca:	f000 fb72 	bl	80032b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	2019      	movs	r0, #25
 8002bd4:	f000 fb51 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002bd8:	2019      	movs	r0, #25
 8002bda:	f000 fb6a 	bl	80032b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	201a      	movs	r0, #26
 8002be4:	f000 fb49 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002be8:	201a      	movs	r0, #26
 8002bea:	f000 fb62 	bl	80032b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	201b      	movs	r0, #27
 8002bf4:	f000 fb41 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002bf8:	201b      	movs	r0, #27
 8002bfa:	f000 fb5a 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	; 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 0314 	add.w	r3, r7, #20
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a4d      	ldr	r2, [pc, #308]	; (8002d64 <HAL_UART_MspInit+0x154>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f040 8093 	bne.w	8002d5a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_UART_MspInit+0x158>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_UART_MspInit+0x158>)
 8002c3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c42:	6413      	str	r3, [r2, #64]	; 0x40
 8002c44:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_UART_MspInit+0x158>)
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_UART_MspInit+0x158>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	4a43      	ldr	r2, [pc, #268]	; (8002d68 <HAL_UART_MspInit+0x158>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c60:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_UART_MspInit+0x158>)
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c7c:	2307      	movs	r3, #7
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	4619      	mov	r1, r3
 8002c86:	4839      	ldr	r0, [pc, #228]	; (8002d6c <HAL_UART_MspInit+0x15c>)
 8002c88:	f000 ff9c 	bl	8003bc4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002c8c:	4b38      	ldr	r3, [pc, #224]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002c8e:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <HAL_UART_MspInit+0x164>)
 8002c90:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002c92:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002c94:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c98:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9a:	4b35      	ldr	r3, [pc, #212]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca0:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca6:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002cc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cc8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002cd0:	4827      	ldr	r0, [pc, #156]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002cd2:	f000 fb17 	bl	8003304 <HAL_DMA_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002cdc:	f7fd fdec 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_UART_MspInit+0x160>)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002cee:	4a23      	ldr	r2, [pc, #140]	; (8002d7c <HAL_UART_MspInit+0x16c>)
 8002cf0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002cf2:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002cf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cf8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002cfc:	2240      	movs	r2, #64	; 0x40
 8002cfe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d06:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d0c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d0e:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d14:	4b18      	ldr	r3, [pc, #96]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002d20:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d26:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d2e:	4812      	ldr	r0, [pc, #72]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d30:	f000 fae8 	bl	8003304 <HAL_DMA_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002d3a:	f7fd fdbd 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a0d      	ldr	r2, [pc, #52]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_UART_MspInit+0x168>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2026      	movs	r0, #38	; 0x26
 8002d50:	f000 fa93 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d54:	2026      	movs	r0, #38	; 0x26
 8002d56:	f000 faac 	bl	80032b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40004400 	.word	0x40004400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	20000108 	.word	0x20000108
 8002d74:	40026088 	.word	0x40026088
 8002d78:	20000168 	.word	0x20000168
 8002d7c:	400260a0 	.word	0x400260a0

08002d80 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a0e      	ldr	r2, [pc, #56]	; (8002dc8 <HAL_UART_MspDeInit+0x48>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d116      	bne.n	8002dc0 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d92:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_UART_MspDeInit+0x4c>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_UART_MspDeInit+0x4c>)
 8002d98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002d9c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);
 8002d9e:	210c      	movs	r1, #12
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <HAL_UART_MspDeInit+0x50>)
 8002da2:	f001 f8a3 	bl	8003eec <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fb58 	bl	8003460 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fb53 	bl	8003460 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002dba:	2026      	movs	r0, #38	; 0x26
 8002dbc:	f000 fa87 	bl	80032ce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40004400 	.word	0x40004400
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40020000 	.word	0x40020000

08002dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <NMI_Handler+0x4>

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e20:	f000 f90c 	bl	800303c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <DMA1_Stream5_IRQHandler+0x10>)
 8002e2e:	f000 fc5f 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000108 	.word	0x20000108

08002e3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <DMA1_Stream6_IRQHandler+0x10>)
 8002e42:	f000 fc55 	bl	80036f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000168 	.word	0x20000168

08002e50 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e54:	4802      	ldr	r0, [pc, #8]	; (8002e60 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002e56:	f001 ffff 	bl	8004e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	2000007c 	.word	0x2000007c

08002e64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e6a:	f001 fff5 	bl	8004e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	2000007c 	.word	0x2000007c

08002e78 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e7c:	4802      	ldr	r0, [pc, #8]	; (8002e88 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e7e:	f001 ffeb 	bl	8004e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000007c 	.word	0x2000007c

08002e8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <TIM1_CC_IRQHandler+0x10>)
 8002e92:	f001 ffe1 	bl	8004e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000007c 	.word	0x2000007c

08002ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <USART2_IRQHandler+0x10>)
 8002ea6:	f002 fcc3 	bl	8005830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200000c4 	.word	0x200000c4

08002eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <_sbrk+0x5c>)
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <_sbrk+0x60>)
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <_sbrk+0x64>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d102      	bne.n	8002ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <_sbrk+0x64>)
 8002ed2:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <_sbrk+0x68>)
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <_sbrk+0x64>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4413      	add	r3, r2
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d207      	bcs.n	8002ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ee4:	f003 fdc4 	bl	8006a70 <__errno>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	220c      	movs	r2, #12
 8002eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e009      	b.n	8002f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ef4:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <_sbrk+0x64>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002efa:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <_sbrk+0x64>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	4a05      	ldr	r2, [pc, #20]	; (8002f18 <_sbrk+0x64>)
 8002f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f06:	68fb      	ldr	r3, [r7, #12]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20020000 	.word	0x20020000
 8002f14:	00000400 	.word	0x00000400
 8002f18:	20001764 	.word	0x20001764
 8002f1c:	200018b8 	.word	0x200018b8

08002f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <SystemInit+0x20>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <SystemInit+0x20>)
 8002f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f48:	480d      	ldr	r0, [pc, #52]	; (8002f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f4a:	490e      	ldr	r1, [pc, #56]	; (8002f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f60:	4c0b      	ldr	r4, [pc, #44]	; (8002f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f6e:	f7ff ffd7 	bl	8002f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f72:	f003 fd83 	bl	8006a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f76:	f7fd faf7 	bl	8000568 <main>
  bx  lr    
 8002f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002f88:	08006fac 	.word	0x08006fac
  ldr r2, =_sbss
 8002f8c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002f90:	200018b4 	.word	0x200018b4

08002f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f94:	e7fe      	b.n	8002f94 <ADC_IRQHandler>
	...

08002f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f9c:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <HAL_Init+0x40>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0d      	ldr	r2, [pc, #52]	; (8002fd8 <HAL_Init+0x40>)
 8002fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_Init+0x40>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_Init+0x40>)
 8002fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fb4:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <HAL_Init+0x40>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_Init+0x40>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fc0:	2003      	movs	r0, #3
 8002fc2:	f000 f94f 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 f808 	bl	8002fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fcc:	f7ff fdb8 	bl	8002b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00

08002fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe4:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_InitTick+0x54>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_InitTick+0x58>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4619      	mov	r1, r3
 8002fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f975 	bl	80032ea <HAL_SYSTICK_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e00e      	b.n	8003028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d80a      	bhi.n	8003026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003010:	2200      	movs	r2, #0
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	f04f 30ff 	mov.w	r0, #4294967295
 8003018:	f000 f92f 	bl	800327a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800301c:	4a06      	ldr	r2, [pc, #24]	; (8003038 <HAL_InitTick+0x5c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
}
 8003028:	4618      	mov	r0, r3
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000000 	.word	0x20000000
 8003034:	20000008 	.word	0x20000008
 8003038:	20000004 	.word	0x20000004

0800303c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_IncTick+0x20>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <HAL_IncTick+0x24>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4413      	add	r3, r2
 800304c:	4a04      	ldr	r2, [pc, #16]	; (8003060 <HAL_IncTick+0x24>)
 800304e:	6013      	str	r3, [r2, #0]
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20000008 	.word	0x20000008
 8003060:	20001768 	.word	0x20001768

08003064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return uwTick;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_GetTick+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20001768 	.word	0x20001768

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	db0b      	blt.n	800310a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	4907      	ldr	r1, [pc, #28]	; (8003118 <__NVIC_EnableIRQ+0x38>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	2001      	movs	r0, #1
 8003102:	fa00 f202 	lsl.w	r2, r0, r2
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db12      	blt.n	8003154 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	490a      	ldr	r1, [pc, #40]	; (8003160 <__NVIC_DisableIRQ+0x44>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2001      	movs	r0, #1
 800313e:	fa00 f202 	lsl.w	r2, r0, r2
 8003142:	3320      	adds	r3, #32
 8003144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003148:	f3bf 8f4f 	dsb	sy
}
 800314c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800314e:	f3bf 8f6f 	isb	sy
}
 8003152:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000e100 	.word	0xe000e100

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
         );
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff8e 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff05 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800328c:	f7ff ff1a 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 8003290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	6978      	ldr	r0, [r7, #20]
 8003298:	f7ff ff8e 	bl	80031b8 <NVIC_EncodePriority>
 800329c:	4602      	mov	r2, r0
 800329e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff ff5d 	bl	8003164 <__NVIC_SetPriority>
}
 80032aa:	bf00      	nop
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	4603      	mov	r3, r0
 80032ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff0d 	bl	80030e0 <__NVIC_EnableIRQ>
}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff1d 	bl	800311c <__NVIC_DisableIRQ>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ff94 	bl	8003220 <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003310:	f7ff fea8 	bl	8003064 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e099      	b.n	8003454 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003340:	e00f      	b.n	8003362 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003342:	f7ff fe8f 	bl	8003064 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b05      	cmp	r3, #5
 800334e:	d908      	bls.n	8003362 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2203      	movs	r2, #3
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e078      	b.n	8003454 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1e8      	bne.n	8003342 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <HAL_DMA_Init+0x158>)
 800337c:	4013      	ands	r3, r2
 800337e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d107      	bne.n	80033cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	4313      	orrs	r3, r2
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d117      	bne.n	8003426 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fb5f 	bl	8003acc <DMA_CheckFifoParam>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2240      	movs	r2, #64	; 0x40
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003422:	2301      	movs	r3, #1
 8003424:	e016      	b.n	8003454 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fb16 	bl	8003a60 <DMA_CalcBaseAndBitshift>
 8003434:	4603      	mov	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	223f      	movs	r2, #63	; 0x3f
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	f010803f 	.word	0xf010803f

08003460 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e050      	b.n	8003514 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d101      	bne.n	8003482 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800347e:	2302      	movs	r3, #2
 8003480:	e048      	b.n	8003514 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2221      	movs	r2, #33	; 0x21
 80034c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 facc 	bl	8003a60 <DMA_CalcBaseAndBitshift>
 80034c8:	4603      	mov	r3, r0
 80034ca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	223f      	movs	r2, #63	; 0x3f
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003532:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_DMA_Start_IT+0x26>
 800353e:	2302      	movs	r3, #2
 8003540:	e040      	b.n	80035c4 <HAL_DMA_Start_IT+0xa8>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d12f      	bne.n	80035b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa4a 	bl	8003a04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	223f      	movs	r2, #63	; 0x3f
 8003576:	409a      	lsls	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0216 	orr.w	r2, r2, #22
 800358a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0208 	orr.w	r2, r2, #8
 80035a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	e005      	b.n	80035c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035be:	2302      	movs	r3, #2
 80035c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035da:	f7ff fd43 	bl	8003064 <HAL_GetTick>
 80035de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d008      	beq.n	80035fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2280      	movs	r2, #128	; 0x80
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e052      	b.n	80036a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0216 	bic.w	r2, r2, #22
 800360c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800361c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d103      	bne.n	800362e <HAL_DMA_Abort+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362a:	2b00      	cmp	r3, #0
 800362c:	d007      	beq.n	800363e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0208 	bic.w	r2, r2, #8
 800363c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800364e:	e013      	b.n	8003678 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003650:	f7ff fd08 	bl	8003064 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b05      	cmp	r3, #5
 800365c:	d90c      	bls.n	8003678 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2203      	movs	r2, #3
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e015      	b.n	80036a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e4      	bne.n	8003650 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368a:	223f      	movs	r2, #63	; 0x3f
 800368c:	409a      	lsls	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d004      	beq.n	80036ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2280      	movs	r2, #128	; 0x80
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00c      	b.n	80036e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2205      	movs	r2, #5
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036fc:	4b8e      	ldr	r3, [pc, #568]	; (8003938 <HAL_DMA_IRQHandler+0x248>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a8e      	ldr	r2, [pc, #568]	; (800393c <HAL_DMA_IRQHandler+0x24c>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0a9b      	lsrs	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371a:	2208      	movs	r2, #8
 800371c:	409a      	lsls	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4013      	ands	r3, r2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01a      	beq.n	800375c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0204 	bic.w	r2, r2, #4
 8003742:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	2208      	movs	r2, #8
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	2201      	movs	r2, #1
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d012      	beq.n	8003792 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00b      	beq.n	8003792 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	2201      	movs	r2, #1
 8003780:	409a      	lsls	r2, r3
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003796:	2204      	movs	r2, #4
 8003798:	409a      	lsls	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00b      	beq.n	80037c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b4:	2204      	movs	r2, #4
 80037b6:	409a      	lsls	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	f043 0204 	orr.w	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037cc:	2210      	movs	r2, #16
 80037ce:	409a      	lsls	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d043      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d03c      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ea:	2210      	movs	r2, #16
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d018      	beq.n	8003832 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d108      	bne.n	8003820 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d024      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	4798      	blx	r3
 800381e:	e01f      	b.n	8003860 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003824:	2b00      	cmp	r3, #0
 8003826:	d01b      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
 8003830:	e016      	b.n	8003860 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0208 	bic.w	r2, r2, #8
 800384e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	2b00      	cmp	r3, #0
 8003856:	d003      	beq.n	8003860 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	2220      	movs	r2, #32
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 808f 	beq.w	8003990 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8087 	beq.w	8003990 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003886:	2220      	movs	r2, #32
 8003888:	409a      	lsls	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b05      	cmp	r3, #5
 8003898:	d136      	bne.n	8003908 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0216 	bic.w	r2, r2, #22
 80038a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_DMA_IRQHandler+0x1da>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0208 	bic.w	r2, r2, #8
 80038d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038de:	223f      	movs	r2, #63	; 0x3f
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d07e      	beq.n	80039fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
        }
        return;
 8003906:	e079      	b.n	80039fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d01d      	beq.n	8003952 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	2b00      	cmp	r3, #0
 800392a:	d031      	beq.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
 8003934:	e02c      	b.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
 8003936:	bf00      	nop
 8003938:	20000000 	.word	0x20000000
 800393c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
 8003950:	e01e      	b.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10f      	bne.n	8003980 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0210 	bic.w	r2, r2, #16
 800396e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	2b00      	cmp	r3, #0
 8003996:	d032      	beq.n	80039fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d022      	beq.n	80039ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2205      	movs	r2, #5
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0201 	bic.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3301      	adds	r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d307      	bcc.n	80039d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <HAL_DMA_IRQHandler+0x2cc>
 80039d6:	e000      	b.n	80039da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
 80039fa:	e000      	b.n	80039fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80039fc:	bf00      	nop
    }
  }
}
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b40      	cmp	r3, #64	; 0x40
 8003a30:	d108      	bne.n	8003a44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a42:	e007      	b.n	8003a54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	60da      	str	r2, [r3, #12]
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	3b10      	subs	r3, #16
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a7a:	4a13      	ldr	r2, [pc, #76]	; (8003ac8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d909      	bls.n	8003aa2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003aa0:	e007      	b.n	8003ab2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	aaaaaaab 	.word	0xaaaaaaab
 8003ac8:	08006f90 	.word	0x08006f90

08003acc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d11f      	bne.n	8003b26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d856      	bhi.n	8003b9a <DMA_CheckFifoParam+0xce>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <DMA_CheckFifoParam+0x28>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b05 	.word	0x08003b05
 8003af8:	08003b17 	.word	0x08003b17
 8003afc:	08003b05 	.word	0x08003b05
 8003b00:	08003b9b 	.word	0x08003b9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d046      	beq.n	8003b9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b14:	e043      	b.n	8003b9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b1e:	d140      	bne.n	8003ba2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b24:	e03d      	b.n	8003ba2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b2e:	d121      	bne.n	8003b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d837      	bhi.n	8003ba6 <DMA_CheckFifoParam+0xda>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <DMA_CheckFifoParam+0x70>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b4d 	.word	0x08003b4d
 8003b40:	08003b53 	.word	0x08003b53
 8003b44:	08003b4d 	.word	0x08003b4d
 8003b48:	08003b65 	.word	0x08003b65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e030      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d025      	beq.n	8003baa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b62:	e022      	b.n	8003baa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b6c:	d11f      	bne.n	8003bae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b72:	e01c      	b.n	8003bae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d903      	bls.n	8003b82 <DMA_CheckFifoParam+0xb6>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d003      	beq.n	8003b88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b80:	e018      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      break;
 8003b86:	e015      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
      break;
 8003b98:	e00b      	b.n	8003bb2 <DMA_CheckFifoParam+0xe6>
      break;
 8003b9a:	bf00      	nop
 8003b9c:	e00a      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e008      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e006      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e004      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e165      	b.n	8003eac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be0:	2201      	movs	r2, #1
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	f040 8154 	bne.w	8003ea6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d005      	beq.n	8003c16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d130      	bne.n	8003c78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	2203      	movs	r2, #3
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 0201 	and.w	r2, r3, #1
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b03      	cmp	r3, #3
 8003c82:	d017      	beq.n	8003cb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	2203      	movs	r2, #3
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d123      	bne.n	8003d08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	220f      	movs	r2, #15
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	08da      	lsrs	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3208      	adds	r2, #8
 8003d02:	69b9      	ldr	r1, [r7, #24]
 8003d04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	2203      	movs	r2, #3
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0203 	and.w	r2, r3, #3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80ae 	beq.w	8003ea6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	4b5d      	ldr	r3, [pc, #372]	; (8003ec4 <HAL_GPIO_Init+0x300>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a5c      	ldr	r2, [pc, #368]	; (8003ec4 <HAL_GPIO_Init+0x300>)
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b5a      	ldr	r3, [pc, #360]	; (8003ec4 <HAL_GPIO_Init+0x300>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d66:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	089b      	lsrs	r3, r3, #2
 8003d6c:	3302      	adds	r3, #2
 8003d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a4f      	ldr	r2, [pc, #316]	; (8003ecc <HAL_GPIO_Init+0x308>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d025      	beq.n	8003dde <HAL_GPIO_Init+0x21a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4e      	ldr	r2, [pc, #312]	; (8003ed0 <HAL_GPIO_Init+0x30c>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01f      	beq.n	8003dda <HAL_GPIO_Init+0x216>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4d      	ldr	r2, [pc, #308]	; (8003ed4 <HAL_GPIO_Init+0x310>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d019      	beq.n	8003dd6 <HAL_GPIO_Init+0x212>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4c      	ldr	r2, [pc, #304]	; (8003ed8 <HAL_GPIO_Init+0x314>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0x20e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4b      	ldr	r2, [pc, #300]	; (8003edc <HAL_GPIO_Init+0x318>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00d      	beq.n	8003dce <HAL_GPIO_Init+0x20a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4a      	ldr	r2, [pc, #296]	; (8003ee0 <HAL_GPIO_Init+0x31c>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_GPIO_Init+0x206>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a49      	ldr	r2, [pc, #292]	; (8003ee4 <HAL_GPIO_Init+0x320>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d101      	bne.n	8003dc6 <HAL_GPIO_Init+0x202>
 8003dc2:	2306      	movs	r3, #6
 8003dc4:	e00c      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dc6:	2307      	movs	r3, #7
 8003dc8:	e00a      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dca:	2305      	movs	r3, #5
 8003dcc:	e008      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dce:	2304      	movs	r3, #4
 8003dd0:	e006      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e004      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e002      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <HAL_GPIO_Init+0x21c>
 8003dde:	2300      	movs	r3, #0
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f002 0203 	and.w	r2, r2, #3
 8003de6:	0092      	lsls	r2, r2, #2
 8003de8:	4093      	lsls	r3, r2
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df0:	4935      	ldr	r1, [pc, #212]	; (8003ec8 <HAL_GPIO_Init+0x304>)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	3302      	adds	r3, #2
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e22:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e28:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e4c:	4a26      	ldr	r2, [pc, #152]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e52:	4b25      	ldr	r3, [pc, #148]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e76:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea0:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <HAL_GPIO_Init+0x324>)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	2b0f      	cmp	r3, #15
 8003eb0:	f67f ae96 	bls.w	8003be0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3724      	adds	r7, #36	; 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40013800 	.word	0x40013800
 8003ecc:	40020000 	.word	0x40020000
 8003ed0:	40020400 	.word	0x40020400
 8003ed4:	40020800 	.word	0x40020800
 8003ed8:	40020c00 	.word	0x40020c00
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40021400 	.word	0x40021400
 8003ee4:	40021800 	.word	0x40021800
 8003ee8:	40013c00 	.word	0x40013c00

08003eec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e0c7      	b.n	8004098 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f08:	2201      	movs	r2, #1
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	f040 80b7 	bne.w	8004092 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003f24:	4a62      	ldr	r2, [pc, #392]	; (80040b0 <HAL_GPIO_DeInit+0x1c4>)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f30:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	220f      	movs	r2, #15
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a5a      	ldr	r2, [pc, #360]	; (80040b4 <HAL_GPIO_DeInit+0x1c8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d025      	beq.n	8003f9a <HAL_GPIO_DeInit+0xae>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a59      	ldr	r2, [pc, #356]	; (80040b8 <HAL_GPIO_DeInit+0x1cc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d01f      	beq.n	8003f96 <HAL_GPIO_DeInit+0xaa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a58      	ldr	r2, [pc, #352]	; (80040bc <HAL_GPIO_DeInit+0x1d0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d019      	beq.n	8003f92 <HAL_GPIO_DeInit+0xa6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <HAL_GPIO_DeInit+0x1d4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_GPIO_DeInit+0xa2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a56      	ldr	r2, [pc, #344]	; (80040c4 <HAL_GPIO_DeInit+0x1d8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00d      	beq.n	8003f8a <HAL_GPIO_DeInit+0x9e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a55      	ldr	r2, [pc, #340]	; (80040c8 <HAL_GPIO_DeInit+0x1dc>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <HAL_GPIO_DeInit+0x9a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a54      	ldr	r2, [pc, #336]	; (80040cc <HAL_GPIO_DeInit+0x1e0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_GPIO_DeInit+0x96>
 8003f7e:	2306      	movs	r3, #6
 8003f80:	e00c      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f82:	2307      	movs	r3, #7
 8003f84:	e00a      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f86:	2305      	movs	r3, #5
 8003f88:	e008      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	e006      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e004      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f92:	2302      	movs	r3, #2
 8003f94:	e002      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <HAL_GPIO_DeInit+0xb0>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	f002 0203 	and.w	r2, r2, #3
 8003fa2:	0092      	lsls	r2, r2, #2
 8003fa4:	4093      	lsls	r3, r2
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d132      	bne.n	8004012 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fac:	4b48      	ldr	r3, [pc, #288]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	4946      	ldr	r1, [pc, #280]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fba:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	4943      	ldr	r1, [pc, #268]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003fc8:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	493f      	ldr	r1, [pc, #252]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	493c      	ldr	r1, [pc, #240]	; (80040d0 <HAL_GPIO_DeInit+0x1e4>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ff4:	4a2e      	ldr	r2, [pc, #184]	; (80040b0 <HAL_GPIO_DeInit+0x1c4>)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	089b      	lsrs	r3, r3, #2
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	43da      	mvns	r2, r3
 8004004:	482a      	ldr	r0, [pc, #168]	; (80040b0 <HAL_GPIO_DeInit+0x1c4>)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	400a      	ands	r2, r1
 800400c:	3302      	adds	r3, #2
 800400e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	2103      	movs	r1, #3
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	401a      	ands	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	08da      	lsrs	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3208      	adds	r2, #8
 8004030:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	08d2      	lsrs	r2, r2, #3
 8004048:	4019      	ands	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2103      	movs	r1, #3
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	2101      	movs	r1, #1
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	2103      	movs	r1, #3
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	401a      	ands	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	3301      	adds	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b0f      	cmp	r3, #15
 800409c:	f67f af34 	bls.w	8003f08 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40013800 	.word	0x40013800
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40020400 	.word	0x40020400
 80040bc:	40020800 	.word	0x40020800
 80040c0:	40020c00 	.word	0x40020c00
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40021400 	.word	0x40021400
 80040cc:	40021800 	.word	0x40021800
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040f0:	e003      	b.n	80040fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0cc      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800411c:	4b68      	ldr	r3, [pc, #416]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d90c      	bls.n	8004144 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b65      	ldr	r3, [pc, #404]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b63      	ldr	r3, [pc, #396]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0b8      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800415c:	4b59      	ldr	r3, [pc, #356]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a58      	ldr	r2, [pc, #352]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004166:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004174:	4b53      	ldr	r3, [pc, #332]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a52      	ldr	r2, [pc, #328]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800417e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b50      	ldr	r3, [pc, #320]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	494d      	ldr	r1, [pc, #308]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d044      	beq.n	8004228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	4b47      	ldr	r3, [pc, #284]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d119      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e07f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d003      	beq.n	80041c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041c2:	2b03      	cmp	r3, #3
 80041c4:	d107      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c6:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e06f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d6:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e067      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e6:	4b37      	ldr	r3, [pc, #220]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 0203 	bic.w	r2, r3, #3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	4934      	ldr	r1, [pc, #208]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f8:	f7fe ff34 	bl	8003064 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fe:	e00a      	b.n	8004216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004200:	f7fe ff30 	bl	8003064 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	f241 3288 	movw	r2, #5000	; 0x1388
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e04f      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 020c 	and.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	429a      	cmp	r2, r3
 8004226:	d1eb      	bne.n	8004200 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b25      	ldr	r3, [pc, #148]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 030f 	and.w	r3, r3, #15
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d20c      	bcs.n	8004250 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d001      	beq.n	8004250 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e032      	b.n	80042b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800425c:	4b19      	ldr	r3, [pc, #100]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4916      	ldr	r1, [pc, #88]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	490e      	ldr	r1, [pc, #56]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800428e:	f000 f855 	bl	800433c <HAL_RCC_GetSysClockFreq>
 8004292:	4602      	mov	r2, r0
 8004294:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	490a      	ldr	r1, [pc, #40]	; (80042c8 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	5ccb      	ldrb	r3, [r1, r3]
 80042a2:	fa22 f303 	lsr.w	r3, r2, r3
 80042a6:	4a09      	ldr	r2, [pc, #36]	; (80042cc <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <HAL_RCC_ClockConfig+0x1c8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fe94 	bl	8002fdc <HAL_InitTick>

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40023c00 	.word	0x40023c00
 80042c4:	40023800 	.word	0x40023800
 80042c8:	08006f78 	.word	0x08006f78
 80042cc:	20000000 	.word	0x20000000
 80042d0:	20000004 	.word	0x20000004

080042d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d8:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	20000000 	.word	0x20000000

080042ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042f0:	f7ff fff0 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetPCLK1Freq+0x20>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	0a9b      	lsrs	r3, r3, #10
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	4903      	ldr	r1, [pc, #12]	; (8004310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004302:	5ccb      	ldrb	r3, [r1, r3]
 8004304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004308:	4618      	mov	r0, r3
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40023800 	.word	0x40023800
 8004310:	08006f88 	.word	0x08006f88

08004314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004318:	f7ff ffdc 	bl	80042d4 <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0b5b      	lsrs	r3, r3, #13
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	08006f88 	.word	0x08006f88

0800433c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004340:	b0ae      	sub	sp, #184	; 0xb8
 8004342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004362:	4bcb      	ldr	r3, [pc, #812]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b0c      	cmp	r3, #12
 800436c:	f200 8206 	bhi.w	800477c <HAL_RCC_GetSysClockFreq+0x440>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	080043ad 	.word	0x080043ad
 800437c:	0800477d 	.word	0x0800477d
 8004380:	0800477d 	.word	0x0800477d
 8004384:	0800477d 	.word	0x0800477d
 8004388:	080043b5 	.word	0x080043b5
 800438c:	0800477d 	.word	0x0800477d
 8004390:	0800477d 	.word	0x0800477d
 8004394:	0800477d 	.word	0x0800477d
 8004398:	080043bd 	.word	0x080043bd
 800439c:	0800477d 	.word	0x0800477d
 80043a0:	0800477d 	.word	0x0800477d
 80043a4:	0800477d 	.word	0x0800477d
 80043a8:	080045ad 	.word	0x080045ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043ac:	4bb9      	ldr	r3, [pc, #740]	; (8004694 <HAL_RCC_GetSysClockFreq+0x358>)
 80043ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80043b2:	e1e7      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043b4:	4bb8      	ldr	r3, [pc, #736]	; (8004698 <HAL_RCC_GetSysClockFreq+0x35c>)
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043ba:	e1e3      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043bc:	4bb4      	ldr	r3, [pc, #720]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043c8:	4bb1      	ldr	r3, [pc, #708]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d071      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d4:	4bae      	ldr	r3, [pc, #696]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	099b      	lsrs	r3, r3, #6
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80043e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043f0:	2300      	movs	r3, #0
 80043f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80043f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043fa:	4622      	mov	r2, r4
 80043fc:	462b      	mov	r3, r5
 80043fe:	f04f 0000 	mov.w	r0, #0
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	0159      	lsls	r1, r3, #5
 8004408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800440c:	0150      	lsls	r0, r2, #5
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4621      	mov	r1, r4
 8004414:	1a51      	subs	r1, r2, r1
 8004416:	6439      	str	r1, [r7, #64]	; 0x40
 8004418:	4629      	mov	r1, r5
 800441a:	eb63 0301 	sbc.w	r3, r3, r1
 800441e:	647b      	str	r3, [r7, #68]	; 0x44
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800442c:	4649      	mov	r1, r9
 800442e:	018b      	lsls	r3, r1, #6
 8004430:	4641      	mov	r1, r8
 8004432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004436:	4641      	mov	r1, r8
 8004438:	018a      	lsls	r2, r1, #6
 800443a:	4641      	mov	r1, r8
 800443c:	1a51      	subs	r1, r2, r1
 800443e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004440:	4649      	mov	r1, r9
 8004442:	eb63 0301 	sbc.w	r3, r3, r1
 8004446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004454:	4649      	mov	r1, r9
 8004456:	00cb      	lsls	r3, r1, #3
 8004458:	4641      	mov	r1, r8
 800445a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445e:	4641      	mov	r1, r8
 8004460:	00ca      	lsls	r2, r1, #3
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4603      	mov	r3, r0
 8004468:	4622      	mov	r2, r4
 800446a:	189b      	adds	r3, r3, r2
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
 800446e:	462b      	mov	r3, r5
 8004470:	460a      	mov	r2, r1
 8004472:	eb42 0303 	adc.w	r3, r2, r3
 8004476:	637b      	str	r3, [r7, #52]	; 0x34
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004484:	4629      	mov	r1, r5
 8004486:	024b      	lsls	r3, r1, #9
 8004488:	4621      	mov	r1, r4
 800448a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800448e:	4621      	mov	r1, r4
 8004490:	024a      	lsls	r2, r1, #9
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800449a:	2200      	movs	r2, #0
 800449c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80044a8:	f7fb feb4 	bl	8000214 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b6:	e067      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b8:	4b75      	ldr	r3, [pc, #468]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	099b      	lsrs	r3, r3, #6
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044c4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80044c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044d2:	2300      	movs	r3, #0
 80044d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80044d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80044da:	4622      	mov	r2, r4
 80044dc:	462b      	mov	r3, r5
 80044de:	f04f 0000 	mov.w	r0, #0
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	0159      	lsls	r1, r3, #5
 80044e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ec:	0150      	lsls	r0, r2, #5
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4621      	mov	r1, r4
 80044f4:	1a51      	subs	r1, r2, r1
 80044f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80044f8:	4629      	mov	r1, r5
 80044fa:	eb63 0301 	sbc.w	r3, r3, r1
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800450c:	4649      	mov	r1, r9
 800450e:	018b      	lsls	r3, r1, #6
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004516:	4641      	mov	r1, r8
 8004518:	018a      	lsls	r2, r1, #6
 800451a:	4641      	mov	r1, r8
 800451c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004520:	4649      	mov	r1, r9
 8004522:	eb63 0b01 	sbc.w	fp, r3, r1
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004532:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453a:	4692      	mov	sl, r2
 800453c:	469b      	mov	fp, r3
 800453e:	4623      	mov	r3, r4
 8004540:	eb1a 0303 	adds.w	r3, sl, r3
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	462b      	mov	r3, r5
 8004548:	eb4b 0303 	adc.w	r3, fp, r3
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800455a:	4629      	mov	r1, r5
 800455c:	028b      	lsls	r3, r1, #10
 800455e:	4621      	mov	r1, r4
 8004560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004564:	4621      	mov	r1, r4
 8004566:	028a      	lsls	r2, r1, #10
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004570:	2200      	movs	r2, #0
 8004572:	673b      	str	r3, [r7, #112]	; 0x70
 8004574:	677a      	str	r2, [r7, #116]	; 0x74
 8004576:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800457a:	f7fb fe4b 	bl	8000214 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4613      	mov	r3, r2
 8004584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004588:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	3301      	adds	r3, #1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800459a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800459e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045aa:	e0eb      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ac:	4b38      	ldr	r3, [pc, #224]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d06b      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c4:	4b32      	ldr	r3, [pc, #200]	; (8004690 <HAL_RCC_GetSysClockFreq+0x354>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	099b      	lsrs	r3, r3, #6
 80045ca:	2200      	movs	r2, #0
 80045cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	663b      	str	r3, [r7, #96]	; 0x60
 80045d8:	2300      	movs	r3, #0
 80045da:	667b      	str	r3, [r7, #100]	; 0x64
 80045dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80045e0:	4622      	mov	r2, r4
 80045e2:	462b      	mov	r3, r5
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	0159      	lsls	r1, r3, #5
 80045ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f2:	0150      	lsls	r0, r2, #5
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4621      	mov	r1, r4
 80045fa:	1a51      	subs	r1, r2, r1
 80045fc:	61b9      	str	r1, [r7, #24]
 80045fe:	4629      	mov	r1, r5
 8004600:	eb63 0301 	sbc.w	r3, r3, r1
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004612:	4659      	mov	r1, fp
 8004614:	018b      	lsls	r3, r1, #6
 8004616:	4651      	mov	r1, sl
 8004618:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800461c:	4651      	mov	r1, sl
 800461e:	018a      	lsls	r2, r1, #6
 8004620:	4651      	mov	r1, sl
 8004622:	ebb2 0801 	subs.w	r8, r2, r1
 8004626:	4659      	mov	r1, fp
 8004628:	eb63 0901 	sbc.w	r9, r3, r1
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800463c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004640:	4690      	mov	r8, r2
 8004642:	4699      	mov	r9, r3
 8004644:	4623      	mov	r3, r4
 8004646:	eb18 0303 	adds.w	r3, r8, r3
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	462b      	mov	r3, r5
 800464e:	eb49 0303 	adc.w	r3, r9, r3
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004660:	4629      	mov	r1, r5
 8004662:	024b      	lsls	r3, r1, #9
 8004664:	4621      	mov	r1, r4
 8004666:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800466a:	4621      	mov	r1, r4
 800466c:	024a      	lsls	r2, r1, #9
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004676:	2200      	movs	r2, #0
 8004678:	65bb      	str	r3, [r7, #88]	; 0x58
 800467a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800467c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004680:	f7fb fdc8 	bl	8000214 <__aeabi_uldivmod>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4613      	mov	r3, r2
 800468a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800468e:	e065      	b.n	800475c <HAL_RCC_GetSysClockFreq+0x420>
 8004690:	40023800 	.word	0x40023800
 8004694:	00f42400 	.word	0x00f42400
 8004698:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800469c:	4b3d      	ldr	r3, [pc, #244]	; (8004794 <HAL_RCC_GetSysClockFreq+0x458>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	2200      	movs	r2, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	4611      	mov	r1, r2
 80046a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046ac:	653b      	str	r3, [r7, #80]	; 0x50
 80046ae:	2300      	movs	r3, #0
 80046b0:	657b      	str	r3, [r7, #84]	; 0x54
 80046b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80046b6:	4642      	mov	r2, r8
 80046b8:	464b      	mov	r3, r9
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c8:	0150      	lsls	r0, r2, #5
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4641      	mov	r1, r8
 80046d0:	1a51      	subs	r1, r2, r1
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	4649      	mov	r1, r9
 80046d6:	eb63 0301 	sbc.w	r3, r3, r1
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80046e8:	4659      	mov	r1, fp
 80046ea:	018b      	lsls	r3, r1, #6
 80046ec:	4651      	mov	r1, sl
 80046ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046f2:	4651      	mov	r1, sl
 80046f4:	018a      	lsls	r2, r1, #6
 80046f6:	4651      	mov	r1, sl
 80046f8:	1a54      	subs	r4, r2, r1
 80046fa:	4659      	mov	r1, fp
 80046fc:	eb63 0501 	sbc.w	r5, r3, r1
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	00eb      	lsls	r3, r5, #3
 800470a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800470e:	00e2      	lsls	r2, r4, #3
 8004710:	4614      	mov	r4, r2
 8004712:	461d      	mov	r5, r3
 8004714:	4643      	mov	r3, r8
 8004716:	18e3      	adds	r3, r4, r3
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	464b      	mov	r3, r9
 800471c:	eb45 0303 	adc.w	r3, r5, r3
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800472e:	4629      	mov	r1, r5
 8004730:	028b      	lsls	r3, r1, #10
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004738:	4621      	mov	r1, r4
 800473a:	028a      	lsls	r2, r1, #10
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004744:	2200      	movs	r2, #0
 8004746:	64bb      	str	r3, [r7, #72]	; 0x48
 8004748:	64fa      	str	r2, [r7, #76]	; 0x4c
 800474a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800474e:	f7fb fd61 	bl	8000214 <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4613      	mov	r3, r2
 8004758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_RCC_GetSysClockFreq+0x458>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0f1b      	lsrs	r3, r3, #28
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800476a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800476e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800477a:	e003      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b06      	ldr	r3, [pc, #24]	; (8004798 <HAL_RCC_GetSysClockFreq+0x45c>)
 800477e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004788:	4618      	mov	r0, r3
 800478a:	37b8      	adds	r7, #184	; 0xb8
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	00f42400 	.word	0x00f42400

0800479c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e28d      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f000 8083 	beq.w	80048c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047bc:	4b94      	ldr	r3, [pc, #592]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 030c 	and.w	r3, r3, #12
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d019      	beq.n	80047fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047c8:	4b91      	ldr	r3, [pc, #580]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d106      	bne.n	80047e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047d4:	4b8e      	ldr	r3, [pc, #568]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047e0:	d00c      	beq.n	80047fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047e2:	4b8b      	ldr	r3, [pc, #556]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d112      	bne.n	8004814 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ee:	4b88      	ldr	r3, [pc, #544]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047fa:	d10b      	bne.n	8004814 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047fc:	4b84      	ldr	r3, [pc, #528]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05b      	beq.n	80048c0 <HAL_RCC_OscConfig+0x124>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d157      	bne.n	80048c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e25a      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481c:	d106      	bne.n	800482c <HAL_RCC_OscConfig+0x90>
 800481e:	4b7c      	ldr	r3, [pc, #496]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a7b      	ldr	r2, [pc, #492]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	e01d      	b.n	8004868 <HAL_RCC_OscConfig+0xcc>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004834:	d10c      	bne.n	8004850 <HAL_RCC_OscConfig+0xb4>
 8004836:	4b76      	ldr	r3, [pc, #472]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a75      	ldr	r2, [pc, #468]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	4b73      	ldr	r3, [pc, #460]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a72      	ldr	r2, [pc, #456]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	e00b      	b.n	8004868 <HAL_RCC_OscConfig+0xcc>
 8004850:	4b6f      	ldr	r3, [pc, #444]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6e      	ldr	r2, [pc, #440]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485a:	6013      	str	r3, [r2, #0]
 800485c:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a6b      	ldr	r2, [pc, #428]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d013      	beq.n	8004898 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004870:	f7fe fbf8 	bl	8003064 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004878:	f7fe fbf4 	bl	8003064 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e21f      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800488a:	4b61      	ldr	r3, [pc, #388]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0xdc>
 8004896:	e014      	b.n	80048c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fe fbe4 	bl	8003064 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048a0:	f7fe fbe0 	bl	8003064 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b64      	cmp	r3, #100	; 0x64
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e20b      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048b2:	4b57      	ldr	r3, [pc, #348]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x104>
 80048be:	e000      	b.n	80048c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d06f      	beq.n	80049ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048ce:	4b50      	ldr	r3, [pc, #320]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d017      	beq.n	800490a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d105      	bne.n	80048f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048e6:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00b      	beq.n	800490a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f2:	4b47      	ldr	r3, [pc, #284]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80048fa:	2b0c      	cmp	r3, #12
 80048fc:	d11c      	bne.n	8004938 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048fe:	4b44      	ldr	r3, [pc, #272]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d116      	bne.n	8004938 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d005      	beq.n	8004922 <HAL_RCC_OscConfig+0x186>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e1d3      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004922:	4b3b      	ldr	r3, [pc, #236]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	4937      	ldr	r1, [pc, #220]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004936:	e03a      	b.n	80049ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004940:	4b34      	ldr	r3, [pc, #208]	; (8004a14 <HAL_RCC_OscConfig+0x278>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fe fb8d 	bl	8003064 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800494e:	f7fe fb89 	bl	8003064 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e1b4      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800496c:	4b28      	ldr	r3, [pc, #160]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	4925      	ldr	r1, [pc, #148]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]
 8004980:	e015      	b.n	80049ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x278>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fe fb6c 	bl	8003064 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004990:	f7fe fb68 	bl	8003064 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e193      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d036      	beq.n	8004a28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d016      	beq.n	80049f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c2:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c8:	f7fe fb4c 	bl	8003064 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d0:	f7fe fb48 	bl	8003064 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e173      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_OscConfig+0x274>)
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x234>
 80049ee:	e01b      	b.n	8004a28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f0:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <HAL_RCC_OscConfig+0x27c>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f6:	f7fe fb35 	bl	8003064 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049fc:	e00e      	b.n	8004a1c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049fe:	f7fe fb31 	bl	8003064 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d907      	bls.n	8004a1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e15c      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
 8004a10:	40023800 	.word	0x40023800
 8004a14:	42470000 	.word	0x42470000
 8004a18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a1c:	4b8a      	ldr	r3, [pc, #552]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1ea      	bne.n	80049fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8097 	beq.w	8004b64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a36:	2300      	movs	r3, #0
 8004a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3a:	4b83      	ldr	r3, [pc, #524]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10f      	bne.n	8004a66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	4a7e      	ldr	r2, [pc, #504]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6413      	str	r3, [r2, #64]	; 0x40
 8004a56:	4b7c      	ldr	r3, [pc, #496]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a62:	2301      	movs	r3, #1
 8004a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a66:	4b79      	ldr	r3, [pc, #484]	; (8004c4c <HAL_RCC_OscConfig+0x4b0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d118      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a72:	4b76      	ldr	r3, [pc, #472]	; (8004c4c <HAL_RCC_OscConfig+0x4b0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a75      	ldr	r2, [pc, #468]	; (8004c4c <HAL_RCC_OscConfig+0x4b0>)
 8004a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a7e:	f7fe faf1 	bl	8003064 <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a86:	f7fe faed 	bl	8003064 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e118      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <HAL_RCC_OscConfig+0x4b0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x31e>
 8004aac:	4b66      	ldr	r3, [pc, #408]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	4a65      	ldr	r2, [pc, #404]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ab8:	e01c      	b.n	8004af4 <HAL_RCC_OscConfig+0x358>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x340>
 8004ac2:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac6:	4a60      	ldr	r2, [pc, #384]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ac8:	f043 0304 	orr.w	r3, r3, #4
 8004acc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ace:	4b5e      	ldr	r3, [pc, #376]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	4a5d      	ldr	r2, [pc, #372]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ada:	e00b      	b.n	8004af4 <HAL_RCC_OscConfig+0x358>
 8004adc:	4b5a      	ldr	r3, [pc, #360]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae0:	4a59      	ldr	r2, [pc, #356]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ae2:	f023 0301 	bic.w	r3, r3, #1
 8004ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae8:	4b57      	ldr	r3, [pc, #348]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a56      	ldr	r2, [pc, #344]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004aee:	f023 0304 	bic.w	r3, r3, #4
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d015      	beq.n	8004b28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afc:	f7fe fab2 	bl	8003064 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b02:	e00a      	b.n	8004b1a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b04:	f7fe faae 	bl	8003064 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0d7      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1a:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0ee      	beq.n	8004b04 <HAL_RCC_OscConfig+0x368>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fe fa9c 	bl	8003064 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2e:	e00a      	b.n	8004b46 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b30:	f7fe fa98 	bl	8003064 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e0c1      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b46:	4b40      	ldr	r3, [pc, #256]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1ee      	bne.n	8004b30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b58:	4b3b      	ldr	r3, [pc, #236]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	4a3a      	ldr	r2, [pc, #232]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80ad 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d060      	beq.n	8004c3c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d145      	bne.n	8004c0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b82:	4b33      	ldr	r3, [pc, #204]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fe fa6c 	bl	8003064 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b90:	f7fe fa68 	bl	8003064 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e093      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	4b29      	ldr	r3, [pc, #164]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69da      	ldr	r2, [r3, #28]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	019b      	lsls	r3, r3, #6
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	061b      	lsls	r3, r3, #24
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	071b      	lsls	r3, r3, #28
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be0:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be6:	f7fe fa3d 	bl	8003064 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bee:	f7fe fa39 	bl	8003064 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e064      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCC_OscConfig+0x452>
 8004c0c:	e05c      	b.n	8004cc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0e:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <HAL_RCC_OscConfig+0x4b4>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fe fa26 	bl	8003064 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fe fa22 	bl	8003064 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e04d      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <HAL_RCC_OscConfig+0x4ac>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x480>
 8004c3a:	e045      	b.n	8004cc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e040      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	40007000 	.word	0x40007000
 8004c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c54:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <HAL_RCC_OscConfig+0x538>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d030      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d129      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d122      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d119      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d107      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800

08004cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e041      	b.n	8004d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fd ff46 	bl	8002b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4619      	mov	r1, r3
 8004d16:	4610      	mov	r0, r2
 8004d18:	f000 fa96 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d001      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e04e      	b.n	8004e2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d022      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d01d      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d018      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a1e      	ldr	r2, [pc, #120]	; (8004e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1c      	ldr	r2, [pc, #112]	; (8004e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00e      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1b      	ldr	r2, [pc, #108]	; (8004e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a19      	ldr	r2, [pc, #100]	; (8004e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d111      	bne.n	8004e1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d010      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0201 	orr.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1a:	e007      	b.n	8004e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40010400 	.word	0x40010400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40001800 	.word	0x40001800

08004e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0202 	mvn.w	r2, #2
 8004e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f9b5 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9a7 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9b8 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b04      	cmp	r3, #4
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0204 	mvn.w	r2, #4
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f98b 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f97d 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f98e 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0208 	mvn.w	r2, #8
 8004f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2204      	movs	r2, #4
 8004f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f961 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f953 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f964 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b10      	cmp	r3, #16
 8004f68:	d122      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0310 	and.w	r3, r3, #16
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d11b      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0210 	mvn.w	r2, #16
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2208      	movs	r2, #8
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f937 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f929 	bl	80051f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f93a 	bl	800521e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d10e      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d107      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0201 	mvn.w	r2, #1
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fb fc5c 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b80      	cmp	r3, #128	; 0x80
 8004fe8:	d10e      	bne.n	8005008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	2b80      	cmp	r3, #128	; 0x80
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fae0 	bl	80055c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d10e      	bne.n	8005034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d107      	bne.n	8005034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800502c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8ff 	bl	8005232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b20      	cmp	r3, #32
 8005040:	d10e      	bne.n	8005060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b20      	cmp	r3, #32
 800504e:	d107      	bne.n	8005060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0220 	mvn.w	r2, #32
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 faaa 	bl	80055b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIM_ConfigClockSource+0x1c>
 8005080:	2302      	movs	r3, #2
 8005082:	e0b4      	b.n	80051ee <HAL_TIM_ConfigClockSource+0x186>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050bc:	d03e      	beq.n	800513c <HAL_TIM_ConfigClockSource+0xd4>
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c2:	f200 8087 	bhi.w	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	f000 8086 	beq.w	80051da <HAL_TIM_ConfigClockSource+0x172>
 80050ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d2:	d87f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b70      	cmp	r3, #112	; 0x70
 80050d6:	d01a      	beq.n	800510e <HAL_TIM_ConfigClockSource+0xa6>
 80050d8:	2b70      	cmp	r3, #112	; 0x70
 80050da:	d87b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b60      	cmp	r3, #96	; 0x60
 80050de:	d050      	beq.n	8005182 <HAL_TIM_ConfigClockSource+0x11a>
 80050e0:	2b60      	cmp	r3, #96	; 0x60
 80050e2:	d877      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b50      	cmp	r3, #80	; 0x50
 80050e6:	d03c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0xfa>
 80050e8:	2b50      	cmp	r3, #80	; 0x50
 80050ea:	d873      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d058      	beq.n	80051a2 <HAL_TIM_ConfigClockSource+0x13a>
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d86f      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b30      	cmp	r3, #48	; 0x30
 80050f6:	d064      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 80050f8:	2b30      	cmp	r3, #48	; 0x30
 80050fa:	d86b      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d060      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d867      	bhi.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b00      	cmp	r3, #0
 8005106:	d05c      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 8005108:	2b10      	cmp	r3, #16
 800510a:	d05a      	beq.n	80051c2 <HAL_TIM_ConfigClockSource+0x15a>
 800510c:	e062      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6899      	ldr	r1, [r3, #8]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f000 f9ad 	bl	800547c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	609a      	str	r2, [r3, #8]
      break;
 800513a:	e04f      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6818      	ldr	r0, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6899      	ldr	r1, [r3, #8]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f000 f996 	bl	800547c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800515e:	609a      	str	r2, [r3, #8]
      break;
 8005160:	e03c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	6859      	ldr	r1, [r3, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	461a      	mov	r2, r3
 8005170:	f000 f90a 	bl	8005388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2150      	movs	r1, #80	; 0x50
 800517a:	4618      	mov	r0, r3
 800517c:	f000 f963 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 8005180:	e02c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	461a      	mov	r2, r3
 8005190:	f000 f929 	bl	80053e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2160      	movs	r1, #96	; 0x60
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f953 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 80051a0:	e01c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f000 f8ea 	bl	8005388 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2140      	movs	r1, #64	; 0x40
 80051ba:	4618      	mov	r0, r3
 80051bc:	f000 f943 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 80051c0:	e00c      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4619      	mov	r1, r3
 80051cc:	4610      	mov	r0, r2
 80051ce:	f000 f93a 	bl	8005446 <TIM_ITRx_SetConfig>
      break;
 80051d2:	e003      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
      break;
 80051d8:	e000      	b.n	80051dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005232:	b480      	push	{r7}
 8005234:	b083      	sub	sp, #12
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800523a:	bf00      	nop
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a40      	ldr	r2, [pc, #256]	; (800535c <TIM_Base_SetConfig+0x114>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d013      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d00f      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a3d      	ldr	r2, [pc, #244]	; (8005360 <TIM_Base_SetConfig+0x118>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d00b      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3c      	ldr	r2, [pc, #240]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d007      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3b      	ldr	r2, [pc, #236]	; (8005368 <TIM_Base_SetConfig+0x120>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3a      	ldr	r2, [pc, #232]	; (800536c <TIM_Base_SetConfig+0x124>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d108      	bne.n	800529a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	4313      	orrs	r3, r2
 8005298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2f      	ldr	r2, [pc, #188]	; (800535c <TIM_Base_SetConfig+0x114>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d027      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a2c      	ldr	r2, [pc, #176]	; (8005360 <TIM_Base_SetConfig+0x118>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d023      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2b      	ldr	r2, [pc, #172]	; (8005364 <TIM_Base_SetConfig+0x11c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <TIM_Base_SetConfig+0x120>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a29      	ldr	r2, [pc, #164]	; (800536c <TIM_Base_SetConfig+0x124>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d017      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a28      	ldr	r2, [pc, #160]	; (8005370 <TIM_Base_SetConfig+0x128>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a27      	ldr	r2, [pc, #156]	; (8005374 <TIM_Base_SetConfig+0x12c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00f      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a26      	ldr	r2, [pc, #152]	; (8005378 <TIM_Base_SetConfig+0x130>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00b      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a25      	ldr	r2, [pc, #148]	; (800537c <TIM_Base_SetConfig+0x134>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a24      	ldr	r2, [pc, #144]	; (8005380 <TIM_Base_SetConfig+0x138>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a23      	ldr	r2, [pc, #140]	; (8005384 <TIM_Base_SetConfig+0x13c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	4313      	orrs	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a0a      	ldr	r2, [pc, #40]	; (800535c <TIM_Base_SetConfig+0x114>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0c      	ldr	r2, [pc, #48]	; (800536c <TIM_Base_SetConfig+0x124>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d103      	bne.n	8005348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	615a      	str	r2, [r3, #20]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40010400 	.word	0x40010400
 8005370:	40014000 	.word	0x40014000
 8005374:	40014400 	.word	0x40014400
 8005378:	40014800 	.word	0x40014800
 800537c:	40001800 	.word	0x40001800
 8005380:	40001c00 	.word	0x40001c00
 8005384:	40002000 	.word	0x40002000

08005388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f023 030a 	bic.w	r3, r3, #10
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f023 0210 	bic.w	r2, r3, #16
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	031b      	lsls	r3, r3, #12
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	621a      	str	r2, [r3, #32]
}
 800543a:	bf00      	nop
 800543c:	371c      	adds	r7, #28
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	f043 0307 	orr.w	r3, r3, #7
 8005468:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
}
 8005470:	bf00      	nop
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005496:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	431a      	orrs	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e05a      	b.n	800558a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a21      	ldr	r2, [pc, #132]	; (8005598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005520:	d01d      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1d      	ldr	r2, [pc, #116]	; (800559c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d018      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a17      	ldr	r2, [pc, #92]	; (80055ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10c      	bne.n	8005578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	4313      	orrs	r3, r2
 800556e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40010000 	.word	0x40010000
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	40010400 	.word	0x40010400
 80055ac:	40014000 	.word	0x40014000
 80055b0:	40001800 	.word	0x40001800

080055b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e03f      	b.n	800566e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd fb04 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	; 0x24
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800561e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 ff71 	bl	8006508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005634:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695a      	ldr	r2, [r3, #20]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005644:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005654:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2220      	movs	r2, #32
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e021      	b.n	80056cc <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2224      	movs	r2, #36	; 0x24
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68da      	ldr	r2, [r3, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800569e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fd fb6d 	bl	8002d80 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	; 0x30
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	4613      	mov	r3, r2
 80056e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d165      	bne.n	80057ba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_UART_Transmit_DMA+0x26>
 80056f4:	88fb      	ldrh	r3, [r7, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e05e      	b.n	80057bc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_UART_Transmit_DMA+0x38>
 8005708:	2302      	movs	r3, #2
 800570a:	e057      	b.n	80057bc <HAL_UART_Transmit_DMA+0xe8>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2221      	movs	r2, #33	; 0x21
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005738:	4a22      	ldr	r2, [pc, #136]	; (80057c4 <HAL_UART_Transmit_DMA+0xf0>)
 800573a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_UART_Transmit_DMA+0xf4>)
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005748:	4a20      	ldr	r2, [pc, #128]	; (80057cc <HAL_UART_Transmit_DMA+0xf8>)
 800574a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	2200      	movs	r2, #0
 8005752:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005754:	f107 0308 	add.w	r3, r7, #8
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3304      	adds	r3, #4
 8005768:	461a      	mov	r2, r3
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	f7fd fed6 	bl	800351c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005778:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3314      	adds	r3, #20
 8005788:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	e853 3f00 	ldrex	r3, [r3]
 8005790:	617b      	str	r3, [r7, #20]
   return(result);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a2:	627a      	str	r2, [r7, #36]	; 0x24
 80057a4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a6:	6a39      	ldr	r1, [r7, #32]
 80057a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057aa:	e841 2300 	strex	r3, r2, [r1]
 80057ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e5      	bne.n	8005782 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3730      	adds	r7, #48	; 0x30
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	08005da1 	.word	0x08005da1
 80057c8:	08005e3b 	.word	0x08005e3b
 80057cc:	08005fb3 	.word	0x08005fb3

080057d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	4613      	mov	r3, r2
 80057dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d11d      	bne.n	8005826 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <HAL_UART_Receive_DMA+0x26>
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e016      	b.n	8005828 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_UART_Receive_DMA+0x38>
 8005804:	2302      	movs	r3, #2
 8005806:	e00f      	b.n	8005828 <HAL_UART_Receive_DMA+0x58>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	461a      	mov	r2, r3
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fc13 	bl	8006048 <UART_Start_Receive_DMA>
 8005822:	4603      	mov	r3, r0
 8005824:	e000      	b.n	8005828 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b0ba      	sub	sp, #232	; 0xe8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005856:	2300      	movs	r3, #0
 8005858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800585c:	2300      	movs	r3, #0
 800585e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800586e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10f      	bne.n	8005896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d009      	beq.n	8005896 <HAL_UART_IRQHandler+0x66>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fd7f 	bl	8006392 <UART_Receive_IT>
      return;
 8005894:	e256      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80de 	beq.w	8005a5c <HAL_UART_IRQHandler+0x22c>
 80058a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d106      	bne.n	80058ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80d1 	beq.w	8005a5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <HAL_UART_IRQHandler+0xae>
 80058c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f043 0201 	orr.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <HAL_UART_IRQHandler+0xd2>
 80058ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f043 0202 	orr.w	r2, r3, #2
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <HAL_UART_IRQHandler+0xf6>
 800590e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f043 0204 	orr.w	r2, r3, #4
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592a:	f003 0308 	and.w	r3, r3, #8
 800592e:	2b00      	cmp	r3, #0
 8005930:	d011      	beq.n	8005956 <HAL_UART_IRQHandler+0x126>
 8005932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005936:	f003 0320 	and.w	r3, r3, #32
 800593a:	2b00      	cmp	r3, #0
 800593c:	d105      	bne.n	800594a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800593e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d005      	beq.n	8005956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0208 	orr.w	r2, r3, #8
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 81ed 	beq.w	8005d3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_UART_IRQHandler+0x14e>
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd0a 	bl	8006392 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	bf0c      	ite	eq
 800598c:	2301      	moveq	r3, #1
 800598e:	2300      	movne	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_UART_IRQHandler+0x17a>
 80059a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d04f      	beq.n	8005a4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fc12 	bl	80061d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d141      	bne.n	8005a42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3314      	adds	r3, #20
 80059c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059cc:	e853 3f00 	ldrex	r3, [r3]
 80059d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3314      	adds	r3, #20
 80059e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80059ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80059ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80059f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1d9      	bne.n	80059be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d013      	beq.n	8005a3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	4a7d      	ldr	r2, [pc, #500]	; (8005c0c <HAL_UART_IRQHandler+0x3dc>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd fe44 	bl	80036ac <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a38:	e00e      	b.n	8005a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fc f912 	bl	8001c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a40:	e00a      	b.n	8005a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fc f90e 	bl	8001c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a48:	e006      	b.n	8005a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fc f90a 	bl	8001c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005a56:	e170      	b.n	8005d3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	bf00      	nop
    return;
 8005a5a:	e16e      	b.n	8005d3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	f040 814a 	bne.w	8005cfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8143 	beq.w	8005cfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 813c 	beq.w	8005cfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a82:	2300      	movs	r3, #0
 8005a84:	60bb      	str	r3, [r7, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60bb      	str	r3, [r7, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	60bb      	str	r3, [r7, #8]
 8005a96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	f040 80b4 	bne.w	8005c10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8140 	beq.w	8005d3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	f080 8139 	bcs.w	8005d3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ade:	f000 8088 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005af0:	e853 3f00 	ldrex	r3, [r3]
 8005af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1d9      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3314      	adds	r3, #20
 8005b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e1      	bne.n	8005b2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	3314      	adds	r3, #20
 8005b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3314      	adds	r3, #20
 8005b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e3      	bne.n	8005b6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	330c      	adds	r3, #12
 8005bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bc2:	f023 0310 	bic.w	r3, r3, #16
 8005bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005bd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005bda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e3      	bne.n	8005bb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fd fced 	bl	80035cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4619      	mov	r1, r3
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8c0 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c08:	e099      	b.n	8005d3e <HAL_UART_IRQHandler+0x50e>
 8005c0a:	bf00      	nop
 8005c0c:	0800629b 	.word	0x0800629b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 808b 	beq.w	8005d42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8086 	beq.w	8005d42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8005c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e3      	bne.n	8005c36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	3314      	adds	r3, #20
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f023 0301 	bic.w	r3, r3, #1
 8005c84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3314      	adds	r3, #20
 8005c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005c92:	633a      	str	r2, [r7, #48]	; 0x30
 8005c94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e3      	bne.n	8005c6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0310 	bic.w	r3, r3, #16
 8005cca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005cd8:	61fa      	str	r2, [r7, #28]
 8005cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	69b9      	ldr	r1, [r7, #24]
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e3      	bne.n	8005cb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f848 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf8:	e023      	b.n	8005d42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_UART_IRQHandler+0x4ea>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fad5 	bl	80062c2 <UART_Transmit_IT>
    return;
 8005d18:	e014      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00e      	beq.n	8005d44 <HAL_UART_IRQHandler+0x514>
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fb15 	bl	8006362 <UART_EndTransmit_IT>
    return;
 8005d38:	e004      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
    return;
 8005d3a:	bf00      	nop
 8005d3c:	e002      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
      return;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <HAL_UART_IRQHandler+0x514>
      return;
 8005d42:	bf00      	nop
  }
}
 8005d44:	37e8      	adds	r7, #232	; 0xe8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop

08005d4c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b090      	sub	sp, #64	; 0x40
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d137      	bne.n	8005e2c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3314      	adds	r3, #20
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3314      	adds	r3, #20
 8005de0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005de2:	633a      	str	r2, [r7, #48]	; 0x30
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1e5      	bne.n	8005dc2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	330c      	adds	r3, #12
 8005e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e16:	61fa      	str	r2, [r7, #28]
 8005e18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1a:	69b9      	ldr	r1, [r7, #24]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	617b      	str	r3, [r7, #20]
   return(result);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e5      	bne.n	8005df6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e2a:	e002      	b.n	8005e32 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e2c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005e2e:	f7fb ff3b 	bl	8001ca8 <HAL_UART_TxCpltCallback>
}
 8005e32:	bf00      	nop
 8005e34:	3740      	adds	r7, #64	; 0x40
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f7ff ff7f 	bl	8005d4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e4e:	bf00      	nop
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b09c      	sub	sp, #112	; 0x70
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d172      	bne.n	8005f58 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e74:	2200      	movs	r2, #0
 8005e76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e82:	e853 3f00 	ldrex	r3, [r3]
 8005e86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005e98:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e9a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e5      	bne.n	8005e78 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ecc:	647a      	str	r2, [r7, #68]	; 0x44
 8005ece:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e5      	bne.n	8005eac <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3314      	adds	r3, #20
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	623b      	str	r3, [r7, #32]
   return(result);
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3314      	adds	r3, #20
 8005efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f00:	633a      	str	r2, [r7, #48]	; 0x30
 8005f02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d119      	bne.n	8005f58 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	330c      	adds	r3, #12
 8005f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	e853 3f00 	ldrex	r3, [r3]
 8005f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f023 0310 	bic.w	r3, r3, #16
 8005f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f44:	61fa      	str	r2, [r7, #28]
 8005f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f48:	69b9      	ldr	r1, [r7, #24]
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	e841 2300 	strex	r3, r2, [r1]
 8005f50:	617b      	str	r3, [r7, #20]
   return(result);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e5      	bne.n	8005f24 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d106      	bne.n	8005f6e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f64:	4619      	mov	r1, r3
 8005f66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f68:	f7ff ff0e 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f6c:	e002      	b.n	8005f74 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005f6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f70:	f7ff fef6 	bl	8005d60 <HAL_UART_RxCpltCallback>
}
 8005f74:	bf00      	nop
 8005f76:	3770      	adds	r7, #112	; 0x70
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d108      	bne.n	8005fa4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fef3 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fa2:	e002      	b.n	8005faa <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff fee5 	bl	8005d74 <HAL_UART_RxHalfCpltCallback>
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b21      	cmp	r3, #33	; 0x21
 8005fe4:	d108      	bne.n	8005ff8 <UART_DMAError+0x46>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ff2:	68b8      	ldr	r0, [r7, #8]
 8005ff4:	f000 f8c6 	bl	8006184 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	bf0c      	ite	eq
 8006006:	2301      	moveq	r3, #1
 8006008:	2300      	movne	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b22      	cmp	r3, #34	; 0x22
 8006018:	d108      	bne.n	800602c <UART_DMAError+0x7a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2200      	movs	r2, #0
 8006024:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006026:	68b8      	ldr	r0, [r7, #8]
 8006028:	f000 f8d4 	bl	80061d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006030:	f043 0210 	orr.w	r2, r3, #16
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006038:	68b8      	ldr	r0, [r7, #8]
 800603a:	f7fb fe13 	bl	8001c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b098      	sub	sp, #96	; 0x60
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	88fa      	ldrh	r2, [r7, #6]
 8006060:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2222      	movs	r2, #34	; 0x22
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006074:	4a40      	ldr	r2, [pc, #256]	; (8006178 <UART_Start_Receive_DMA+0x130>)
 8006076:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	4a3f      	ldr	r2, [pc, #252]	; (800617c <UART_Start_Receive_DMA+0x134>)
 800607e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	4a3e      	ldr	r2, [pc, #248]	; (8006180 <UART_Start_Receive_DMA+0x138>)
 8006086:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608c:	2200      	movs	r2, #0
 800608e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006090:	f107 0308 	add.w	r3, r7, #8
 8006094:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3304      	adds	r3, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	f7fd fa38 	bl	800351c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	613b      	str	r3, [r7, #16]
 80060c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d019      	beq.n	8006106 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	330c      	adds	r3, #12
 80060d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060dc:	e853 3f00 	ldrex	r3, [r3]
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	330c      	adds	r3, #12
 80060f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80060f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006100:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e5      	bne.n	80060d2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3314      	adds	r3, #20
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	657b      	str	r3, [r7, #84]	; 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006126:	63ba      	str	r2, [r7, #56]	; 0x38
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800612c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e5      	bne.n	8006106 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	617b      	str	r3, [r7, #20]
   return(result);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006150:	653b      	str	r3, [r7, #80]	; 0x50
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800615a:	627a      	str	r2, [r7, #36]	; 0x24
 800615c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	6a39      	ldr	r1, [r7, #32]
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	61fb      	str	r3, [r7, #28]
   return(result);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3760      	adds	r7, #96	; 0x60
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	08005e57 	.word	0x08005e57
 800617c:	08005f7d 	.word	0x08005f7d
 8006180:	08005fb3 	.word	0x08005fb3

08006184 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b089      	sub	sp, #36	; 0x24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	60bb      	str	r3, [r7, #8]
   return(result);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	61ba      	str	r2, [r7, #24]
 80061ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6979      	ldr	r1, [r7, #20]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e5      	bne.n	800618c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80061c8:	bf00      	nop
 80061ca:	3724      	adds	r7, #36	; 0x24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b095      	sub	sp, #84	; 0x54
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80061fc:	643a      	str	r2, [r7, #64]	; 0x40
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006202:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e5      	bne.n	80061dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3314      	adds	r3, #20
 8006216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	e853 3f00 	ldrex	r3, [r3]
 800621e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f023 0301 	bic.w	r3, r3, #1
 8006226:	64bb      	str	r3, [r7, #72]	; 0x48
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3314      	adds	r3, #20
 800622e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006230:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006234:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1e5      	bne.n	8006210 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006248:	2b01      	cmp	r3, #1
 800624a:	d119      	bne.n	8006280 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	60bb      	str	r3, [r7, #8]
   return(result);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	647b      	str	r3, [r7, #68]	; 0x44
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800626c:	61ba      	str	r2, [r7, #24]
 800626e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6979      	ldr	r1, [r7, #20]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	613b      	str	r3, [r7, #16]
   return(result);
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800628e:	bf00      	nop
 8006290:	3754      	adds	r7, #84	; 0x54
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7fb fcd5 	bl	8001c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b21      	cmp	r3, #33	; 0x21
 80062d4:	d13e      	bne.n	8006354 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062de:	d114      	bne.n	800630a <UART_Transmit_IT+0x48>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d110      	bne.n	800630a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	1c9a      	adds	r2, r3, #2
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	621a      	str	r2, [r3, #32]
 8006308:	e008      	b.n	800631c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6211      	str	r1, [r2, #32]
 8006314:	781a      	ldrb	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29b      	uxth	r3, r3
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	4619      	mov	r1, r3
 800632a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10f      	bne.n	8006350 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800633e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800634e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	e000      	b.n	8006356 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006354:	2302      	movs	r3, #2
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68da      	ldr	r2, [r3, #12]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006378:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2220      	movs	r2, #32
 800637e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb fc90 	bl	8001ca8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b08c      	sub	sp, #48	; 0x30
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b22      	cmp	r3, #34	; 0x22
 80063a4:	f040 80ab 	bne.w	80064fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d117      	bne.n	80063e2 <UART_Receive_IT+0x50>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d113      	bne.n	80063e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063da:	1c9a      	adds	r2, r3, #2
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	629a      	str	r2, [r3, #40]	; 0x28
 80063e0:	e026      	b.n	8006430 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d007      	beq.n	8006406 <UART_Receive_IT+0x74>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <UART_Receive_IT+0x82>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	e008      	b.n	8006426 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006420:	b2da      	uxtb	r2, r3
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	4619      	mov	r1, r3
 800643e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006440:	2b00      	cmp	r3, #0
 8006442:	d15a      	bne.n	80064fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0220 	bic.w	r2, r2, #32
 8006452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	2b01      	cmp	r3, #1
 8006482:	d135      	bne.n	80064f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	330c      	adds	r3, #12
 8006490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	613b      	str	r3, [r7, #16]
   return(result);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f023 0310 	bic.w	r3, r3, #16
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	330c      	adds	r3, #12
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	623a      	str	r2, [r7, #32]
 80064ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ae:	69f9      	ldr	r1, [r7, #28]
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	e841 2300 	strex	r3, r2, [r1]
 80064b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1e5      	bne.n	800648a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b10      	cmp	r3, #16
 80064ca:	d10a      	bne.n	80064e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064e6:	4619      	mov	r1, r3
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff fc4d 	bl	8005d88 <HAL_UARTEx_RxEventCallback>
 80064ee:	e002      	b.n	80064f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff fc35 	bl	8005d60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e002      	b.n	8006500 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	e000      	b.n	8006500 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3730      	adds	r7, #48	; 0x30
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800650c:	b0c0      	sub	sp, #256	; 0x100
 800650e:	af00      	add	r7, sp, #0
 8006510:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006524:	68d9      	ldr	r1, [r3, #12]
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	ea40 0301 	orr.w	r3, r0, r1
 8006530:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	689a      	ldr	r2, [r3, #8]
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	431a      	orrs	r2, r3
 8006540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	431a      	orrs	r2, r3
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	4313      	orrs	r3, r2
 8006550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006560:	f021 010c 	bic.w	r1, r1, #12
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800656e:	430b      	orrs	r3, r1
 8006570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	6999      	ldr	r1, [r3, #24]
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	ea40 0301 	orr.w	r3, r0, r1
 800658e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b8f      	ldr	r3, [pc, #572]	; (80067d4 <UART_SetConfig+0x2cc>)
 8006598:	429a      	cmp	r2, r3
 800659a:	d005      	beq.n	80065a8 <UART_SetConfig+0xa0>
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	4b8d      	ldr	r3, [pc, #564]	; (80067d8 <UART_SetConfig+0x2d0>)
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d104      	bne.n	80065b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fd feb4 	bl	8004314 <HAL_RCC_GetPCLK2Freq>
 80065ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80065b0:	e003      	b.n	80065ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065b2:	f7fd fe9b 	bl	80042ec <HAL_RCC_GetPCLK1Freq>
 80065b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065c4:	f040 810c 	bne.w	80067e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80065d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80065da:	4622      	mov	r2, r4
 80065dc:	462b      	mov	r3, r5
 80065de:	1891      	adds	r1, r2, r2
 80065e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80065e2:	415b      	adcs	r3, r3
 80065e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80065ea:	4621      	mov	r1, r4
 80065ec:	eb12 0801 	adds.w	r8, r2, r1
 80065f0:	4629      	mov	r1, r5
 80065f2:	eb43 0901 	adc.w	r9, r3, r1
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800660a:	4690      	mov	r8, r2
 800660c:	4699      	mov	r9, r3
 800660e:	4623      	mov	r3, r4
 8006610:	eb18 0303 	adds.w	r3, r8, r3
 8006614:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006618:	462b      	mov	r3, r5
 800661a:	eb49 0303 	adc.w	r3, r9, r3
 800661e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800662e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006632:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006636:	460b      	mov	r3, r1
 8006638:	18db      	adds	r3, r3, r3
 800663a:	653b      	str	r3, [r7, #80]	; 0x50
 800663c:	4613      	mov	r3, r2
 800663e:	eb42 0303 	adc.w	r3, r2, r3
 8006642:	657b      	str	r3, [r7, #84]	; 0x54
 8006644:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006648:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800664c:	f7f9 fde2 	bl	8000214 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4b61      	ldr	r3, [pc, #388]	; (80067dc <UART_SetConfig+0x2d4>)
 8006656:	fba3 2302 	umull	r2, r3, r3, r2
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	011c      	lsls	r4, r3, #4
 800665e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006662:	2200      	movs	r2, #0
 8006664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006668:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800666c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006670:	4642      	mov	r2, r8
 8006672:	464b      	mov	r3, r9
 8006674:	1891      	adds	r1, r2, r2
 8006676:	64b9      	str	r1, [r7, #72]	; 0x48
 8006678:	415b      	adcs	r3, r3
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006680:	4641      	mov	r1, r8
 8006682:	eb12 0a01 	adds.w	sl, r2, r1
 8006686:	4649      	mov	r1, r9
 8006688:	eb43 0b01 	adc.w	fp, r3, r1
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006698:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800669c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a0:	4692      	mov	sl, r2
 80066a2:	469b      	mov	fp, r3
 80066a4:	4643      	mov	r3, r8
 80066a6:	eb1a 0303 	adds.w	r3, sl, r3
 80066aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066ae:	464b      	mov	r3, r9
 80066b0:	eb4b 0303 	adc.w	r3, fp, r3
 80066b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80066c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80066cc:	460b      	mov	r3, r1
 80066ce:	18db      	adds	r3, r3, r3
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
 80066d2:	4613      	mov	r3, r2
 80066d4:	eb42 0303 	adc.w	r3, r2, r3
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
 80066da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80066e2:	f7f9 fd97 	bl	8000214 <__aeabi_uldivmod>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4611      	mov	r1, r2
 80066ec:	4b3b      	ldr	r3, [pc, #236]	; (80067dc <UART_SetConfig+0x2d4>)
 80066ee:	fba3 2301 	umull	r2, r3, r3, r1
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2264      	movs	r2, #100	; 0x64
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	1acb      	subs	r3, r1, r3
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006702:	4b36      	ldr	r3, [pc, #216]	; (80067dc <UART_SetConfig+0x2d4>)
 8006704:	fba3 2302 	umull	r2, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	005b      	lsls	r3, r3, #1
 800670c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006710:	441c      	add	r4, r3
 8006712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006716:	2200      	movs	r2, #0
 8006718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800671c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006720:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006724:	4642      	mov	r2, r8
 8006726:	464b      	mov	r3, r9
 8006728:	1891      	adds	r1, r2, r2
 800672a:	63b9      	str	r1, [r7, #56]	; 0x38
 800672c:	415b      	adcs	r3, r3
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006734:	4641      	mov	r1, r8
 8006736:	1851      	adds	r1, r2, r1
 8006738:	6339      	str	r1, [r7, #48]	; 0x30
 800673a:	4649      	mov	r1, r9
 800673c:	414b      	adcs	r3, r1
 800673e:	637b      	str	r3, [r7, #52]	; 0x34
 8006740:	f04f 0200 	mov.w	r2, #0
 8006744:	f04f 0300 	mov.w	r3, #0
 8006748:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800674c:	4659      	mov	r1, fp
 800674e:	00cb      	lsls	r3, r1, #3
 8006750:	4651      	mov	r1, sl
 8006752:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006756:	4651      	mov	r1, sl
 8006758:	00ca      	lsls	r2, r1, #3
 800675a:	4610      	mov	r0, r2
 800675c:	4619      	mov	r1, r3
 800675e:	4603      	mov	r3, r0
 8006760:	4642      	mov	r2, r8
 8006762:	189b      	adds	r3, r3, r2
 8006764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006768:	464b      	mov	r3, r9
 800676a:	460a      	mov	r2, r1
 800676c:	eb42 0303 	adc.w	r3, r2, r3
 8006770:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006780:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006784:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006788:	460b      	mov	r3, r1
 800678a:	18db      	adds	r3, r3, r3
 800678c:	62bb      	str	r3, [r7, #40]	; 0x28
 800678e:	4613      	mov	r3, r2
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006796:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800679a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800679e:	f7f9 fd39 	bl	8000214 <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <UART_SetConfig+0x2d4>)
 80067a8:	fba3 1302 	umull	r1, r3, r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	2164      	movs	r1, #100	; 0x64
 80067b0:	fb01 f303 	mul.w	r3, r1, r3
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	3332      	adds	r3, #50	; 0x32
 80067ba:	4a08      	ldr	r2, [pc, #32]	; (80067dc <UART_SetConfig+0x2d4>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	095b      	lsrs	r3, r3, #5
 80067c2:	f003 0207 	and.w	r2, r3, #7
 80067c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4422      	add	r2, r4
 80067ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067d0:	e106      	b.n	80069e0 <UART_SetConfig+0x4d8>
 80067d2:	bf00      	nop
 80067d4:	40011000 	.word	0x40011000
 80067d8:	40011400 	.word	0x40011400
 80067dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067e4:	2200      	movs	r2, #0
 80067e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80067ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80067f2:	4642      	mov	r2, r8
 80067f4:	464b      	mov	r3, r9
 80067f6:	1891      	adds	r1, r2, r2
 80067f8:	6239      	str	r1, [r7, #32]
 80067fa:	415b      	adcs	r3, r3
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
 80067fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006802:	4641      	mov	r1, r8
 8006804:	1854      	adds	r4, r2, r1
 8006806:	4649      	mov	r1, r9
 8006808:	eb43 0501 	adc.w	r5, r3, r1
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	00eb      	lsls	r3, r5, #3
 8006816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800681a:	00e2      	lsls	r2, r4, #3
 800681c:	4614      	mov	r4, r2
 800681e:	461d      	mov	r5, r3
 8006820:	4643      	mov	r3, r8
 8006822:	18e3      	adds	r3, r4, r3
 8006824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006828:	464b      	mov	r3, r9
 800682a:	eb45 0303 	adc.w	r3, r5, r3
 800682e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800683e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800684e:	4629      	mov	r1, r5
 8006850:	008b      	lsls	r3, r1, #2
 8006852:	4621      	mov	r1, r4
 8006854:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006858:	4621      	mov	r1, r4
 800685a:	008a      	lsls	r2, r1, #2
 800685c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006860:	f7f9 fcd8 	bl	8000214 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4b60      	ldr	r3, [pc, #384]	; (80069ec <UART_SetConfig+0x4e4>)
 800686a:	fba3 2302 	umull	r2, r3, r3, r2
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	011c      	lsls	r4, r3, #4
 8006872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800687c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006880:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	1891      	adds	r1, r2, r2
 800688a:	61b9      	str	r1, [r7, #24]
 800688c:	415b      	adcs	r3, r3
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006894:	4641      	mov	r1, r8
 8006896:	1851      	adds	r1, r2, r1
 8006898:	6139      	str	r1, [r7, #16]
 800689a:	4649      	mov	r1, r9
 800689c:	414b      	adcs	r3, r1
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068ac:	4659      	mov	r1, fp
 80068ae:	00cb      	lsls	r3, r1, #3
 80068b0:	4651      	mov	r1, sl
 80068b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b6:	4651      	mov	r1, sl
 80068b8:	00ca      	lsls	r2, r1, #3
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	4603      	mov	r3, r0
 80068c0:	4642      	mov	r2, r8
 80068c2:	189b      	adds	r3, r3, r2
 80068c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80068c8:	464b      	mov	r3, r9
 80068ca:	460a      	mov	r2, r1
 80068cc:	eb42 0303 	adc.w	r3, r2, r3
 80068d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80068de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80068ec:	4649      	mov	r1, r9
 80068ee:	008b      	lsls	r3, r1, #2
 80068f0:	4641      	mov	r1, r8
 80068f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068f6:	4641      	mov	r1, r8
 80068f8:	008a      	lsls	r2, r1, #2
 80068fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068fe:	f7f9 fc89 	bl	8000214 <__aeabi_uldivmod>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4611      	mov	r1, r2
 8006908:	4b38      	ldr	r3, [pc, #224]	; (80069ec <UART_SetConfig+0x4e4>)
 800690a:	fba3 2301 	umull	r2, r3, r3, r1
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	2264      	movs	r2, #100	; 0x64
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	1acb      	subs	r3, r1, r3
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	3332      	adds	r3, #50	; 0x32
 800691c:	4a33      	ldr	r2, [pc, #204]	; (80069ec <UART_SetConfig+0x4e4>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006928:	441c      	add	r4, r3
 800692a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692e:	2200      	movs	r2, #0
 8006930:	673b      	str	r3, [r7, #112]	; 0x70
 8006932:	677a      	str	r2, [r7, #116]	; 0x74
 8006934:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	1891      	adds	r1, r2, r2
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	415b      	adcs	r3, r3
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006948:	4641      	mov	r1, r8
 800694a:	1851      	adds	r1, r2, r1
 800694c:	6039      	str	r1, [r7, #0]
 800694e:	4649      	mov	r1, r9
 8006950:	414b      	adcs	r3, r1
 8006952:	607b      	str	r3, [r7, #4]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006960:	4659      	mov	r1, fp
 8006962:	00cb      	lsls	r3, r1, #3
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800696a:	4651      	mov	r1, sl
 800696c:	00ca      	lsls	r2, r1, #3
 800696e:	4610      	mov	r0, r2
 8006970:	4619      	mov	r1, r3
 8006972:	4603      	mov	r3, r0
 8006974:	4642      	mov	r2, r8
 8006976:	189b      	adds	r3, r3, r2
 8006978:	66bb      	str	r3, [r7, #104]	; 0x68
 800697a:	464b      	mov	r3, r9
 800697c:	460a      	mov	r2, r1
 800697e:	eb42 0303 	adc.w	r3, r2, r3
 8006982:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
 800698e:	667a      	str	r2, [r7, #100]	; 0x64
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800699c:	4649      	mov	r1, r9
 800699e:	008b      	lsls	r3, r1, #2
 80069a0:	4641      	mov	r1, r8
 80069a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069a6:	4641      	mov	r1, r8
 80069a8:	008a      	lsls	r2, r1, #2
 80069aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80069ae:	f7f9 fc31 	bl	8000214 <__aeabi_uldivmod>
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <UART_SetConfig+0x4e4>)
 80069b8:	fba3 1302 	umull	r1, r3, r3, r2
 80069bc:	095b      	lsrs	r3, r3, #5
 80069be:	2164      	movs	r1, #100	; 0x64
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	011b      	lsls	r3, r3, #4
 80069c8:	3332      	adds	r3, #50	; 0x32
 80069ca:	4a08      	ldr	r2, [pc, #32]	; (80069ec <UART_SetConfig+0x4e4>)
 80069cc:	fba2 2303 	umull	r2, r3, r2, r3
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	f003 020f 	and.w	r2, r3, #15
 80069d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4422      	add	r2, r4
 80069de:	609a      	str	r2, [r3, #8]
}
 80069e0:	bf00      	nop
 80069e2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80069e6:	46bd      	mov	sp, r7
 80069e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069ec:	51eb851f 	.word	0x51eb851f

080069f0 <realloc>:
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <realloc+0xc>)
 80069f2:	460a      	mov	r2, r1
 80069f4:	4601      	mov	r1, r0
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f000 b802 	b.w	8006a00 <_realloc_r>
 80069fc:	20000058 	.word	0x20000058

08006a00 <_realloc_r>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	4680      	mov	r8, r0
 8006a06:	4614      	mov	r4, r2
 8006a08:	460e      	mov	r6, r1
 8006a0a:	b921      	cbnz	r1, 8006a16 <_realloc_r+0x16>
 8006a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a10:	4611      	mov	r1, r2
 8006a12:	f000 b8d3 	b.w	8006bbc <_malloc_r>
 8006a16:	b92a      	cbnz	r2, 8006a24 <_realloc_r+0x24>
 8006a18:	f000 f864 	bl	8006ae4 <_free_r>
 8006a1c:	4625      	mov	r5, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a24:	f000 f956 	bl	8006cd4 <_malloc_usable_size_r>
 8006a28:	4284      	cmp	r4, r0
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	d802      	bhi.n	8006a34 <_realloc_r+0x34>
 8006a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a32:	d812      	bhi.n	8006a5a <_realloc_r+0x5a>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4640      	mov	r0, r8
 8006a38:	f000 f8c0 	bl	8006bbc <_malloc_r>
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d0ed      	beq.n	8006a1e <_realloc_r+0x1e>
 8006a42:	42bc      	cmp	r4, r7
 8006a44:	4622      	mov	r2, r4
 8006a46:	4631      	mov	r1, r6
 8006a48:	bf28      	it	cs
 8006a4a:	463a      	movcs	r2, r7
 8006a4c:	f000 f83c 	bl	8006ac8 <memcpy>
 8006a50:	4631      	mov	r1, r6
 8006a52:	4640      	mov	r0, r8
 8006a54:	f000 f846 	bl	8006ae4 <_free_r>
 8006a58:	e7e1      	b.n	8006a1e <_realloc_r+0x1e>
 8006a5a:	4635      	mov	r5, r6
 8006a5c:	e7df      	b.n	8006a1e <_realloc_r+0x1e>

08006a5e <memset>:
 8006a5e:	4402      	add	r2, r0
 8006a60:	4603      	mov	r3, r0
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d100      	bne.n	8006a68 <memset+0xa>
 8006a66:	4770      	bx	lr
 8006a68:	f803 1b01 	strb.w	r1, [r3], #1
 8006a6c:	e7f9      	b.n	8006a62 <memset+0x4>
	...

08006a70 <__errno>:
 8006a70:	4b01      	ldr	r3, [pc, #4]	; (8006a78 <__errno+0x8>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	20000058 	.word	0x20000058

08006a7c <__libc_init_array>:
 8006a7c:	b570      	push	{r4, r5, r6, lr}
 8006a7e:	4d0d      	ldr	r5, [pc, #52]	; (8006ab4 <__libc_init_array+0x38>)
 8006a80:	4c0d      	ldr	r4, [pc, #52]	; (8006ab8 <__libc_init_array+0x3c>)
 8006a82:	1b64      	subs	r4, r4, r5
 8006a84:	10a4      	asrs	r4, r4, #2
 8006a86:	2600      	movs	r6, #0
 8006a88:	42a6      	cmp	r6, r4
 8006a8a:	d109      	bne.n	8006aa0 <__libc_init_array+0x24>
 8006a8c:	4d0b      	ldr	r5, [pc, #44]	; (8006abc <__libc_init_array+0x40>)
 8006a8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ac0 <__libc_init_array+0x44>)
 8006a90:	f000 f938 	bl	8006d04 <_init>
 8006a94:	1b64      	subs	r4, r4, r5
 8006a96:	10a4      	asrs	r4, r4, #2
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42a6      	cmp	r6, r4
 8006a9c:	d105      	bne.n	8006aaa <__libc_init_array+0x2e>
 8006a9e:	bd70      	pop	{r4, r5, r6, pc}
 8006aa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa4:	4798      	blx	r3
 8006aa6:	3601      	adds	r6, #1
 8006aa8:	e7ee      	b.n	8006a88 <__libc_init_array+0xc>
 8006aaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aae:	4798      	blx	r3
 8006ab0:	3601      	adds	r6, #1
 8006ab2:	e7f2      	b.n	8006a9a <__libc_init_array+0x1e>
 8006ab4:	08006fa0 	.word	0x08006fa0
 8006ab8:	08006fa0 	.word	0x08006fa0
 8006abc:	08006fa0 	.word	0x08006fa0
 8006ac0:	08006fa8 	.word	0x08006fa8

08006ac4 <__retarget_lock_acquire_recursive>:
 8006ac4:	4770      	bx	lr

08006ac6 <__retarget_lock_release_recursive>:
 8006ac6:	4770      	bx	lr

08006ac8 <memcpy>:
 8006ac8:	440a      	add	r2, r1
 8006aca:	4291      	cmp	r1, r2
 8006acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad0:	d100      	bne.n	8006ad4 <memcpy+0xc>
 8006ad2:	4770      	bx	lr
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ada:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ade:	4291      	cmp	r1, r2
 8006ae0:	d1f9      	bne.n	8006ad6 <memcpy+0xe>
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <_free_r>:
 8006ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ae6:	2900      	cmp	r1, #0
 8006ae8:	d044      	beq.n	8006b74 <_free_r+0x90>
 8006aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006aee:	9001      	str	r0, [sp, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f1a1 0404 	sub.w	r4, r1, #4
 8006af6:	bfb8      	it	lt
 8006af8:	18e4      	addlt	r4, r4, r3
 8006afa:	f000 f8df 	bl	8006cbc <__malloc_lock>
 8006afe:	4a1e      	ldr	r2, [pc, #120]	; (8006b78 <_free_r+0x94>)
 8006b00:	9801      	ldr	r0, [sp, #4]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	b933      	cbnz	r3, 8006b14 <_free_r+0x30>
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6014      	str	r4, [r2, #0]
 8006b0a:	b003      	add	sp, #12
 8006b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b10:	f000 b8da 	b.w	8006cc8 <__malloc_unlock>
 8006b14:	42a3      	cmp	r3, r4
 8006b16:	d908      	bls.n	8006b2a <_free_r+0x46>
 8006b18:	6825      	ldr	r5, [r4, #0]
 8006b1a:	1961      	adds	r1, r4, r5
 8006b1c:	428b      	cmp	r3, r1
 8006b1e:	bf01      	itttt	eq
 8006b20:	6819      	ldreq	r1, [r3, #0]
 8006b22:	685b      	ldreq	r3, [r3, #4]
 8006b24:	1949      	addeq	r1, r1, r5
 8006b26:	6021      	streq	r1, [r4, #0]
 8006b28:	e7ed      	b.n	8006b06 <_free_r+0x22>
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	b10b      	cbz	r3, 8006b34 <_free_r+0x50>
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	d9fa      	bls.n	8006b2a <_free_r+0x46>
 8006b34:	6811      	ldr	r1, [r2, #0]
 8006b36:	1855      	adds	r5, r2, r1
 8006b38:	42a5      	cmp	r5, r4
 8006b3a:	d10b      	bne.n	8006b54 <_free_r+0x70>
 8006b3c:	6824      	ldr	r4, [r4, #0]
 8006b3e:	4421      	add	r1, r4
 8006b40:	1854      	adds	r4, r2, r1
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	6011      	str	r1, [r2, #0]
 8006b46:	d1e0      	bne.n	8006b0a <_free_r+0x26>
 8006b48:	681c      	ldr	r4, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	6053      	str	r3, [r2, #4]
 8006b4e:	440c      	add	r4, r1
 8006b50:	6014      	str	r4, [r2, #0]
 8006b52:	e7da      	b.n	8006b0a <_free_r+0x26>
 8006b54:	d902      	bls.n	8006b5c <_free_r+0x78>
 8006b56:	230c      	movs	r3, #12
 8006b58:	6003      	str	r3, [r0, #0]
 8006b5a:	e7d6      	b.n	8006b0a <_free_r+0x26>
 8006b5c:	6825      	ldr	r5, [r4, #0]
 8006b5e:	1961      	adds	r1, r4, r5
 8006b60:	428b      	cmp	r3, r1
 8006b62:	bf04      	itt	eq
 8006b64:	6819      	ldreq	r1, [r3, #0]
 8006b66:	685b      	ldreq	r3, [r3, #4]
 8006b68:	6063      	str	r3, [r4, #4]
 8006b6a:	bf04      	itt	eq
 8006b6c:	1949      	addeq	r1, r1, r5
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	6054      	str	r4, [r2, #4]
 8006b72:	e7ca      	b.n	8006b0a <_free_r+0x26>
 8006b74:	b003      	add	sp, #12
 8006b76:	bd30      	pop	{r4, r5, pc}
 8006b78:	200018ac 	.word	0x200018ac

08006b7c <sbrk_aligned>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4e0e      	ldr	r6, [pc, #56]	; (8006bb8 <sbrk_aligned+0x3c>)
 8006b80:	460c      	mov	r4, r1
 8006b82:	6831      	ldr	r1, [r6, #0]
 8006b84:	4605      	mov	r5, r0
 8006b86:	b911      	cbnz	r1, 8006b8e <sbrk_aligned+0x12>
 8006b88:	f000 f8ac 	bl	8006ce4 <_sbrk_r>
 8006b8c:	6030      	str	r0, [r6, #0]
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f8a7 	bl	8006ce4 <_sbrk_r>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d00a      	beq.n	8006bb0 <sbrk_aligned+0x34>
 8006b9a:	1cc4      	adds	r4, r0, #3
 8006b9c:	f024 0403 	bic.w	r4, r4, #3
 8006ba0:	42a0      	cmp	r0, r4
 8006ba2:	d007      	beq.n	8006bb4 <sbrk_aligned+0x38>
 8006ba4:	1a21      	subs	r1, r4, r0
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f89c 	bl	8006ce4 <_sbrk_r>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d101      	bne.n	8006bb4 <sbrk_aligned+0x38>
 8006bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	200018b0 	.word	0x200018b0

08006bbc <_malloc_r>:
 8006bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc0:	1ccd      	adds	r5, r1, #3
 8006bc2:	f025 0503 	bic.w	r5, r5, #3
 8006bc6:	3508      	adds	r5, #8
 8006bc8:	2d0c      	cmp	r5, #12
 8006bca:	bf38      	it	cc
 8006bcc:	250c      	movcc	r5, #12
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	db01      	blt.n	8006bd8 <_malloc_r+0x1c>
 8006bd4:	42a9      	cmp	r1, r5
 8006bd6:	d905      	bls.n	8006be4 <_malloc_r+0x28>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	2600      	movs	r6, #0
 8006bde:	4630      	mov	r0, r6
 8006be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cb8 <_malloc_r+0xfc>
 8006be8:	f000 f868 	bl	8006cbc <__malloc_lock>
 8006bec:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf0:	461c      	mov	r4, r3
 8006bf2:	bb5c      	cbnz	r4, 8006c4c <_malloc_r+0x90>
 8006bf4:	4629      	mov	r1, r5
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	f7ff ffc0 	bl	8006b7c <sbrk_aligned>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	4604      	mov	r4, r0
 8006c00:	d155      	bne.n	8006cae <_malloc_r+0xf2>
 8006c02:	f8d8 4000 	ldr.w	r4, [r8]
 8006c06:	4626      	mov	r6, r4
 8006c08:	2e00      	cmp	r6, #0
 8006c0a:	d145      	bne.n	8006c98 <_malloc_r+0xdc>
 8006c0c:	2c00      	cmp	r4, #0
 8006c0e:	d048      	beq.n	8006ca2 <_malloc_r+0xe6>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	4631      	mov	r1, r6
 8006c14:	4638      	mov	r0, r7
 8006c16:	eb04 0903 	add.w	r9, r4, r3
 8006c1a:	f000 f863 	bl	8006ce4 <_sbrk_r>
 8006c1e:	4581      	cmp	r9, r0
 8006c20:	d13f      	bne.n	8006ca2 <_malloc_r+0xe6>
 8006c22:	6821      	ldr	r1, [r4, #0]
 8006c24:	1a6d      	subs	r5, r5, r1
 8006c26:	4629      	mov	r1, r5
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f7ff ffa7 	bl	8006b7c <sbrk_aligned>
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d037      	beq.n	8006ca2 <_malloc_r+0xe6>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	442b      	add	r3, r5
 8006c36:	6023      	str	r3, [r4, #0]
 8006c38:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d038      	beq.n	8006cb2 <_malloc_r+0xf6>
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	42a2      	cmp	r2, r4
 8006c44:	d12b      	bne.n	8006c9e <_malloc_r+0xe2>
 8006c46:	2200      	movs	r2, #0
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	e00f      	b.n	8006c6c <_malloc_r+0xb0>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	1b52      	subs	r2, r2, r5
 8006c50:	d41f      	bmi.n	8006c92 <_malloc_r+0xd6>
 8006c52:	2a0b      	cmp	r2, #11
 8006c54:	d917      	bls.n	8006c86 <_malloc_r+0xca>
 8006c56:	1961      	adds	r1, r4, r5
 8006c58:	42a3      	cmp	r3, r4
 8006c5a:	6025      	str	r5, [r4, #0]
 8006c5c:	bf18      	it	ne
 8006c5e:	6059      	strne	r1, [r3, #4]
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	bf08      	it	eq
 8006c64:	f8c8 1000 	streq.w	r1, [r8]
 8006c68:	5162      	str	r2, [r4, r5]
 8006c6a:	604b      	str	r3, [r1, #4]
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f104 060b 	add.w	r6, r4, #11
 8006c72:	f000 f829 	bl	8006cc8 <__malloc_unlock>
 8006c76:	f026 0607 	bic.w	r6, r6, #7
 8006c7a:	1d23      	adds	r3, r4, #4
 8006c7c:	1af2      	subs	r2, r6, r3
 8006c7e:	d0ae      	beq.n	8006bde <_malloc_r+0x22>
 8006c80:	1b9b      	subs	r3, r3, r6
 8006c82:	50a3      	str	r3, [r4, r2]
 8006c84:	e7ab      	b.n	8006bde <_malloc_r+0x22>
 8006c86:	42a3      	cmp	r3, r4
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	d1dd      	bne.n	8006c48 <_malloc_r+0x8c>
 8006c8c:	f8c8 2000 	str.w	r2, [r8]
 8006c90:	e7ec      	b.n	8006c6c <_malloc_r+0xb0>
 8006c92:	4623      	mov	r3, r4
 8006c94:	6864      	ldr	r4, [r4, #4]
 8006c96:	e7ac      	b.n	8006bf2 <_malloc_r+0x36>
 8006c98:	4634      	mov	r4, r6
 8006c9a:	6876      	ldr	r6, [r6, #4]
 8006c9c:	e7b4      	b.n	8006c08 <_malloc_r+0x4c>
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	e7cc      	b.n	8006c3c <_malloc_r+0x80>
 8006ca2:	230c      	movs	r3, #12
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	f000 f80e 	bl	8006cc8 <__malloc_unlock>
 8006cac:	e797      	b.n	8006bde <_malloc_r+0x22>
 8006cae:	6025      	str	r5, [r4, #0]
 8006cb0:	e7dc      	b.n	8006c6c <_malloc_r+0xb0>
 8006cb2:	605b      	str	r3, [r3, #4]
 8006cb4:	deff      	udf	#255	; 0xff
 8006cb6:	bf00      	nop
 8006cb8:	200018ac 	.word	0x200018ac

08006cbc <__malloc_lock>:
 8006cbc:	4801      	ldr	r0, [pc, #4]	; (8006cc4 <__malloc_lock+0x8>)
 8006cbe:	f7ff bf01 	b.w	8006ac4 <__retarget_lock_acquire_recursive>
 8006cc2:	bf00      	nop
 8006cc4:	200018a8 	.word	0x200018a8

08006cc8 <__malloc_unlock>:
 8006cc8:	4801      	ldr	r0, [pc, #4]	; (8006cd0 <__malloc_unlock+0x8>)
 8006cca:	f7ff befc 	b.w	8006ac6 <__retarget_lock_release_recursive>
 8006cce:	bf00      	nop
 8006cd0:	200018a8 	.word	0x200018a8

08006cd4 <_malloc_usable_size_r>:
 8006cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cd8:	1f18      	subs	r0, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfbc      	itt	lt
 8006cde:	580b      	ldrlt	r3, [r1, r0]
 8006ce0:	18c0      	addlt	r0, r0, r3
 8006ce2:	4770      	bx	lr

08006ce4 <_sbrk_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d06      	ldr	r5, [pc, #24]	; (8006d00 <_sbrk_r+0x1c>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	f7fc f8e0 	bl	8002eb4 <_sbrk>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_sbrk_r+0x1a>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_sbrk_r+0x1a>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	200018a4 	.word	0x200018a4

08006d04 <_init>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	bf00      	nop
 8006d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0a:	bc08      	pop	{r3}
 8006d0c:	469e      	mov	lr, r3
 8006d0e:	4770      	bx	lr

08006d10 <_fini>:
 8006d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d12:	bf00      	nop
 8006d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d16:	bc08      	pop	{r3}
 8006d18:	469e      	mov	lr, r3
 8006d1a:	4770      	bx	lr
